##[[
cinclude '<blend2d.h>'
linklib 'blend2d'
]]
global BLRange: type <cimport,nodecl,forwarddecl> = @record{}
global BLRandom: type <cimport,nodecl,forwarddecl> = @record{}
global BLCreateForeignInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLFileCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLRuntimeBuildInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLRuntimeSystemInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLRuntimeResourceInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLStringCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLStringImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLArrayCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLArrayImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLVariantCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLVariantImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLPointI: type <cimport,nodecl,forwarddecl> = @record{}
global BLPoint: type <cimport,nodecl,forwarddecl> = @record{}
global BLSizeI: type <cimport,nodecl,forwarddecl> = @record{}
global BLSize: type <cimport,nodecl,forwarddecl> = @record{}
global BLBoxI: type <cimport,nodecl,forwarddecl> = @record{}
global BLBox: type <cimport,nodecl,forwarddecl> = @record{}
global BLRectI: type <cimport,nodecl,forwarddecl> = @record{}
global BLRect: type <cimport,nodecl,forwarddecl> = @record{}
global BLLine: type <cimport,nodecl,forwarddecl> = @record{}
global BLTriangle: type <cimport,nodecl,forwarddecl> = @record{}
global BLRoundRect: type <cimport,nodecl,forwarddecl> = @record{}
global BLCircle: type <cimport,nodecl,forwarddecl> = @record{}
global BLEllipse: type <cimport,nodecl,forwarddecl> = @record{}
global BLArc: type <cimport,nodecl,forwarddecl> = @record{}
global BLMatrix2D: type <cimport,nodecl,forwarddecl> = @record{}
global BLApproximationOptions: type <cimport,nodecl,forwarddecl> = @record{}
global BLStrokeOptionsCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLPathCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLPathImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLPathView: type <cimport,nodecl,forwarddecl> = @record{}
global BLRegionCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLRegionImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLFormatInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageData: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageScaleOptions: type <cimport,nodecl,forwarddecl> = @record{}
global BLPixelConverterCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLPixelConverterOptions: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageCodecCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageCodecImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageCodecVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageDecoderCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageDecoderImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageDecoderVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageEncoderCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageEncoderImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLImageEncoderVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLRgba32: type <cimport,nodecl,forwarddecl> = @record{}
global BLRgba64: type <cimport,nodecl,forwarddecl> = @record{}
global BLRgba: type <cimport,nodecl,forwarddecl> = @record{}
global BLGradientCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLGradientImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLGradientStop: type <cimport,nodecl,forwarddecl> = @record{}
global BLLinearGradientValues: type <cimport,nodecl,forwarddecl> = @record{}
global BLRadialGradientValues: type <cimport,nodecl,forwarddecl> = @record{}
global BLConicalGradientValues: type <cimport,nodecl,forwarddecl> = @record{}
global BLPatternCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLPatternImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLStyleCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLContextCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLContextImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLContextVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLContextCookie: type <cimport,nodecl,forwarddecl> = @record{}
global BLContextCreateInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLContextHints: type <cimport,nodecl,forwarddecl> = @record{}
global BLContextState: type <cimport,nodecl,forwarddecl> = @record{}
global BLGlyphBufferCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLGlyphBufferImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLGlyphInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLGlyphMappingState: type <cimport,nodecl,forwarddecl> = @record{}
global BLGlyphOutlineSinkInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLGlyphPlacement: type <cimport,nodecl,forwarddecl> = @record{}
global BLGlyphRun: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontUnicodeCoverage: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontFaceInfo: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontQueryProperties: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontFeature: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontDesignMetrics: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontMatrix: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontMetrics: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontPanose: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontTable: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontVariation: type <cimport,nodecl,forwarddecl> = @record{}
global BLTextMetrics: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontFaceCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontFaceImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontFaceVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontDataCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontDataImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontDataVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontManagerCore: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontManagerImpl: type <cimport,nodecl,forwarddecl> = @record{}
global BLFontManagerVirt: type <cimport,nodecl,forwarddecl> = @record{}
global BLResult: type = @cuint
global BLDestroyImplFunc: type <cimport,nodecl> = @function(pointer, pointer): void
global BLPathSinkFunc: type <cimport,nodecl> = @function(*BLPathCore, pointer, pointer): BLResult
global BLResultCode: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_SUCCESS = 0,
  BL_ERROR_START_INDEX = 65536,
  BL_ERROR_OUT_OF_MEMORY = 65536,
  BL_ERROR_INVALID_VALUE = 65537,
  BL_ERROR_INVALID_STATE = 65538,
  BL_ERROR_INVALID_HANDLE = 65539,
  BL_ERROR_VALUE_TOO_LARGE = 65540,
  BL_ERROR_NOT_INITIALIZED = 65541,
  BL_ERROR_NOT_IMPLEMENTED = 65542,
  BL_ERROR_NOT_PERMITTED = 65543,
  BL_ERROR_IO = 65544,
  BL_ERROR_BUSY = 65545,
  BL_ERROR_INTERRUPTED = 65546,
  BL_ERROR_TRY_AGAIN = 65547,
  BL_ERROR_TIMED_OUT = 65548,
  BL_ERROR_BROKEN_PIPE = 65549,
  BL_ERROR_INVALID_SEEK = 65550,
  BL_ERROR_SYMLINK_LOOP = 65551,
  BL_ERROR_FILE_TOO_LARGE = 65552,
  BL_ERROR_ALREADY_EXISTS = 65553,
  BL_ERROR_ACCESS_DENIED = 65554,
  BL_ERROR_MEDIA_CHANGED = 65555,
  BL_ERROR_READ_ONLY_FS = 65556,
  BL_ERROR_NO_DEVICE = 65557,
  BL_ERROR_NO_ENTRY = 65558,
  BL_ERROR_NO_MEDIA = 65559,
  BL_ERROR_NO_MORE_DATA = 65560,
  BL_ERROR_NO_MORE_FILES = 65561,
  BL_ERROR_NO_SPACE_LEFT = 65562,
  BL_ERROR_NOT_EMPTY = 65563,
  BL_ERROR_NOT_FILE = 65564,
  BL_ERROR_NOT_DIRECTORY = 65565,
  BL_ERROR_NOT_SAME_DEVICE = 65566,
  BL_ERROR_NOT_BLOCK_DEVICE = 65567,
  BL_ERROR_INVALID_FILE_NAME = 65568,
  BL_ERROR_FILE_NAME_TOO_LONG = 65569,
  BL_ERROR_TOO_MANY_OPEN_FILES = 65570,
  BL_ERROR_TOO_MANY_OPEN_FILES_BY_OS = 65571,
  BL_ERROR_TOO_MANY_LINKS = 65572,
  BL_ERROR_TOO_MANY_THREADS = 65573,
  BL_ERROR_THREAD_POOL_EXHAUSTED = 65574,
  BL_ERROR_FILE_EMPTY = 65575,
  BL_ERROR_OPEN_FAILED = 65576,
  BL_ERROR_NOT_ROOT_DEVICE = 65577,
  BL_ERROR_UNKNOWN_SYSTEM_ERROR = 65578,
  BL_ERROR_INVALID_ALIGNMENT = 65579,
  BL_ERROR_INVALID_SIGNATURE = 65580,
  BL_ERROR_INVALID_DATA = 65581,
  BL_ERROR_INVALID_STRING = 65582,
  BL_ERROR_DATA_TRUNCATED = 65583,
  BL_ERROR_DATA_TOO_LARGE = 65584,
  BL_ERROR_DECOMPRESSION_FAILED = 65585,
  BL_ERROR_INVALID_GEOMETRY = 65586,
  BL_ERROR_NO_MATCHING_VERTEX = 65587,
  BL_ERROR_NO_MATCHING_COOKIE = 65588,
  BL_ERROR_NO_STATES_TO_RESTORE = 65589,
  BL_ERROR_IMAGE_TOO_LARGE = 65590,
  BL_ERROR_IMAGE_NO_MATCHING_CODEC = 65591,
  BL_ERROR_IMAGE_UNKNOWN_FILE_FORMAT = 65592,
  BL_ERROR_IMAGE_DECODER_NOT_PROVIDED = 65593,
  BL_ERROR_IMAGE_ENCODER_NOT_PROVIDED = 65594,
  BL_ERROR_PNG_MULTIPLE_IHDR = 65595,
  BL_ERROR_PNG_INVALID_IDAT = 65596,
  BL_ERROR_PNG_INVALID_IEND = 65597,
  BL_ERROR_PNG_INVALID_PLTE = 65598,
  BL_ERROR_PNG_INVALID_TRNS = 65599,
  BL_ERROR_PNG_INVALID_FILTER = 65600,
  BL_ERROR_JPEG_UNSUPPORTED_FEATURE = 65601,
  BL_ERROR_JPEG_INVALID_SOS = 65602,
  BL_ERROR_JPEG_INVALID_SOF = 65603,
  BL_ERROR_JPEG_MULTIPLE_SOF = 65604,
  BL_ERROR_JPEG_UNSUPPORTED_SOF = 65605,
  BL_ERROR_FONT_NOT_INITIALIZED = 65606,
  BL_ERROR_FONT_NO_MATCH = 65607,
  BL_ERROR_FONT_NO_CHARACTER_MAPPING = 65608,
  BL_ERROR_FONT_MISSING_IMPORTANT_TABLE = 65609,
  BL_ERROR_FONT_FEATURE_NOT_AVAILABLE = 65610,
  BL_ERROR_FONT_CFF_INVALID_DATA = 65611,
  BL_ERROR_FONT_PROGRAM_TERMINATED = 65612,
  BL_ERROR_INVALID_GLYPH = 65613
}
global BLByteOrder: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_BYTE_ORDER_LE = 0,
  BL_BYTE_ORDER_BE = 1,
  BL_BYTE_ORDER_NATIVE = 0,
  BL_BYTE_ORDER_SWAPPED = 1
}
global BLDataAccessFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_DATA_ACCESS_READ = 1,
  BL_DATA_ACCESS_WRITE = 2,
  BL_DATA_ACCESS_RW = 3
}
global BLDataSourceType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_DATA_SOURCE_TYPE_NONE = 0,
  BL_DATA_SOURCE_TYPE_MEMORY = 1,
  BL_DATA_SOURCE_TYPE_FILE = 2,
  BL_DATA_SOURCE_TYPE_CUSTOM = 3,
  BL_DATA_SOURCE_TYPE_COUNT = 4
}
global BLModifyOp: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_MODIFY_OP_ASSIGN_FIT = 0,
  BL_MODIFY_OP_ASSIGN_GROW = 1,
  BL_MODIFY_OP_APPEND_FIT = 2,
  BL_MODIFY_OP_APPEND_GROW = 3,
  BL_MODIFY_OP_COUNT = 4
}
global BLBooleanOp: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_BOOLEAN_OP_COPY = 0,
  BL_BOOLEAN_OP_AND = 1,
  BL_BOOLEAN_OP_OR = 2,
  BL_BOOLEAN_OP_XOR = 3,
  BL_BOOLEAN_OP_SUB = 4,
  BL_BOOLEAN_OP_COUNT = 5
}
global BLExtendMode: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_EXTEND_MODE_PAD = 0,
  BL_EXTEND_MODE_REPEAT = 1,
  BL_EXTEND_MODE_REFLECT = 2,
  BL_EXTEND_MODE_PAD_X_PAD_Y = 0,
  BL_EXTEND_MODE_REPEAT_X_REPEAT_Y = 1,
  BL_EXTEND_MODE_REFLECT_X_REFLECT_Y = 2,
  BL_EXTEND_MODE_PAD_X_REPEAT_Y = 3,
  BL_EXTEND_MODE_PAD_X_REFLECT_Y = 4,
  BL_EXTEND_MODE_REPEAT_X_PAD_Y = 5,
  BL_EXTEND_MODE_REPEAT_X_REFLECT_Y = 6,
  BL_EXTEND_MODE_REFLECT_X_PAD_Y = 7,
  BL_EXTEND_MODE_REFLECT_X_REPEAT_Y = 8,
  BL_EXTEND_MODE_SIMPLE_COUNT = 3,
  BL_EXTEND_MODE_COMPLEX_COUNT = 9
}
global BLTextEncoding: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_TEXT_ENCODING_UTF8 = 0,
  BL_TEXT_ENCODING_UTF16 = 1,
  BL_TEXT_ENCODING_UTF32 = 2,
  BL_TEXT_ENCODING_LATIN1 = 3,
  BL_TEXT_ENCODING_WCHAR = 2,
  BL_TEXT_ENCODING_COUNT = 4
}
global function blTraceError(result: BLResult): BLResult <cimport,nodecl> end
BLRange = @record{
  start: csize,
  End: csize
}
BLCreateForeignInfo = @record{
  data: pointer,
  size: csize,
  destroyFunc: BLDestroyImplFunc,
  destroyData: pointer
}
global BLArrayView: type <cimport,nodecl> = @record{
  data: pointer,
  size: csize
}
global BLStringView: type <cimport,nodecl> = @record{
  data: cstring,
  size: csize
}
global BLRegionView: type <cimport,nodecl> = @record{
  data: *BLBoxI,
  size: csize
}
global BLDataView: type = @BLArrayView
global function blArrayInit(self: *BLArrayCore, arrayTypeId: uint32): BLResult <cimport,nodecl> end
global function blArrayDestroy(self: *BLArrayCore): BLResult <cimport,nodecl> end
global function blArrayReset(self: *BLArrayCore): BLResult <cimport,nodecl> end
global function blArrayCreateFromData(self: *BLArrayCore, data: pointer, size: csize, capacity: csize, dataAccessFlags: uint32, destroyFunc: BLDestroyImplFunc, destroyData: pointer): BLResult <cimport,nodecl> end
global function blArrayGetSize(self: *BLArrayCore): csize <cimport,nodecl> end
global function blArrayGetCapacity(self: *BLArrayCore): csize <cimport,nodecl> end
global function blArrayGetData(self: *BLArrayCore): pointer <cimport,nodecl> end
global function blArrayClear(self: *BLArrayCore): BLResult <cimport,nodecl> end
global function blArrayShrink(self: *BLArrayCore): BLResult <cimport,nodecl> end
global function blArrayReserve(self: *BLArrayCore, n: csize): BLResult <cimport,nodecl> end
global function blArrayResize(self: *BLArrayCore, n: csize, fill: pointer): BLResult <cimport,nodecl> end
global function blArrayMakeMutable(self: *BLArrayCore, dataOut: *pointer): BLResult <cimport,nodecl> end
global function blArrayModifyOp(self: *BLArrayCore, op: uint32, n: csize, dataOut: *pointer): BLResult <cimport,nodecl> end
global function blArrayInsertOp(self: *BLArrayCore, index: csize, n: csize, dataOut: *pointer): BLResult <cimport,nodecl> end
global function blArrayAssignMove(self: *BLArrayCore, other: *BLArrayCore): BLResult <cimport,nodecl> end
global function blArrayAssignWeak(self: *BLArrayCore, other: *BLArrayCore): BLResult <cimport,nodecl> end
global function blArrayAssignDeep(self: *BLArrayCore, other: *BLArrayCore): BLResult <cimport,nodecl> end
global function blArrayAssignView(self: *BLArrayCore, items: pointer, n: csize): BLResult <cimport,nodecl> end
global function blArrayAppendU8(self: *BLArrayCore, value: uint8): BLResult <cimport,nodecl> end
global function blArrayAppendU16(self: *BLArrayCore, value: uint16): BLResult <cimport,nodecl> end
global function blArrayAppendU32(self: *BLArrayCore, value: uint32): BLResult <cimport,nodecl> end
global function blArrayAppendU64(self: *BLArrayCore, value: uint64): BLResult <cimport,nodecl> end
global function blArrayAppendF32(self: *BLArrayCore, value: float32): BLResult <cimport,nodecl> end
global function blArrayAppendF64(self: *BLArrayCore, value: float64): BLResult <cimport,nodecl> end
global function blArrayAppendItem(self: *BLArrayCore, item: pointer): BLResult <cimport,nodecl> end
global function blArrayAppendView(self: *BLArrayCore, items: pointer, n: csize): BLResult <cimport,nodecl> end
global function blArrayInsertU8(self: *BLArrayCore, index: csize, value: uint8): BLResult <cimport,nodecl> end
global function blArrayInsertU16(self: *BLArrayCore, index: csize, value: uint16): BLResult <cimport,nodecl> end
global function blArrayInsertU32(self: *BLArrayCore, index: csize, value: uint32): BLResult <cimport,nodecl> end
global function blArrayInsertU64(self: *BLArrayCore, index: csize, value: uint64): BLResult <cimport,nodecl> end
global function blArrayInsertF32(self: *BLArrayCore, index: csize, value: float32): BLResult <cimport,nodecl> end
global function blArrayInsertF64(self: *BLArrayCore, index: csize, value: float64): BLResult <cimport,nodecl> end
global function blArrayInsertItem(self: *BLArrayCore, index: csize, item: pointer): BLResult <cimport,nodecl> end
global function blArrayInsertView(self: *BLArrayCore, index: csize, items: pointer, n: csize): BLResult <cimport,nodecl> end
global function blArrayReplaceU8(self: *BLArrayCore, index: csize, value: uint8): BLResult <cimport,nodecl> end
global function blArrayReplaceU16(self: *BLArrayCore, index: csize, value: uint16): BLResult <cimport,nodecl> end
global function blArrayReplaceU32(self: *BLArrayCore, index: csize, value: uint32): BLResult <cimport,nodecl> end
global function blArrayReplaceU64(self: *BLArrayCore, index: csize, value: uint64): BLResult <cimport,nodecl> end
global function blArrayReplaceF32(self: *BLArrayCore, index: csize, value: float32): BLResult <cimport,nodecl> end
global function blArrayReplaceF64(self: *BLArrayCore, index: csize, value: float64): BLResult <cimport,nodecl> end
global function blArrayReplaceItem(self: *BLArrayCore, index: csize, item: pointer): BLResult <cimport,nodecl> end
global function blArrayReplaceView(self: *BLArrayCore, rStart: csize, rEnd: csize, items: pointer, n: csize): BLResult <cimport,nodecl> end
global function blArrayRemoveIndex(self: *BLArrayCore, index: csize): BLResult <cimport,nodecl> end
global function blArrayRemoveRange(self: *BLArrayCore, rStart: csize, rEnd: csize): BLResult <cimport,nodecl> end
global function blArrayEquals(a: *BLArrayCore, b: *BLArrayCore): boolean <cimport,nodecl> end
global function blContextInit(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextInitAs(self: *BLContextCore, image: *BLImageCore, options: *BLContextCreateInfo): BLResult <cimport,nodecl> end
global function blContextDestroy(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextReset(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextAssignMove(self: *BLContextCore, other: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextAssignWeak(self: *BLContextCore, other: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextGetType(self: *BLContextCore): uint32 <cimport,nodecl> end
global function blContextGetTargetSize(self: *BLContextCore, targetSizeOut: *BLSize): BLResult <cimport,nodecl> end
global function blContextGetTargetImage(self: *BLContextCore): *BLImageCore <cimport,nodecl> end
global function blContextBegin(self: *BLContextCore, image: *BLImageCore, options: *BLContextCreateInfo): BLResult <cimport,nodecl> end
global function blContextEnd(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextFlush(self: *BLContextCore, flags: uint32): BLResult <cimport,nodecl> end
global function blContextQueryProperty(self: *BLContextCore, propertyId: uint32, valueOut: pointer): BLResult <cimport,nodecl> end
global function blContextSave(self: *BLContextCore, cookie: *BLContextCookie): BLResult <cimport,nodecl> end
global function blContextRestore(self: *BLContextCore, cookie: *BLContextCookie): BLResult <cimport,nodecl> end
global function blContextGetMetaMatrix(self: *BLContextCore, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blContextGetUserMatrix(self: *BLContextCore, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blContextUserToMeta(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextMatrixOp(self: *BLContextCore, opType: uint32, opData: pointer): BLResult <cimport,nodecl> end
global function blContextSetHint(self: *BLContextCore, hintType: uint32, value: uint32): BLResult <cimport,nodecl> end
global function blContextSetHints(self: *BLContextCore, hints: *BLContextHints): BLResult <cimport,nodecl> end
global function blContextSetFlattenMode(self: *BLContextCore, mode: uint32): BLResult <cimport,nodecl> end
global function blContextSetFlattenTolerance(self: *BLContextCore, tolerance: float64): BLResult <cimport,nodecl> end
global function blContextSetApproximationOptions(self: *BLContextCore, options: *BLApproximationOptions): BLResult <cimport,nodecl> end
global function blContextSetCompOp(self: *BLContextCore, compOp: uint32): BLResult <cimport,nodecl> end
global function blContextSetGlobalAlpha(self: *BLContextCore, alpha: float64): BLResult <cimport,nodecl> end
global function blContextSetFillAlpha(self: *BLContextCore, alpha: float64): BLResult <cimport,nodecl> end
global function blContextGetFillStyle(self: *BLContextCore, styleOut: *BLStyleCore): BLResult <cimport,nodecl> end
global function blContextSetFillStyle(self: *BLContextCore, style: *BLStyleCore): BLResult <cimport,nodecl> end
global function blContextSetFillStyleRgba(self: *BLContextCore, rgba: *BLRgba): BLResult <cimport,nodecl> end
global function blContextSetFillStyleRgba32(self: *BLContextCore, rgba32: uint32): BLResult <cimport,nodecl> end
global function blContextSetFillStyleRgba64(self: *BLContextCore, rgba64: uint64): BLResult <cimport,nodecl> end
global function blContextSetFillStyleObject(self: *BLContextCore, object: pointer): BLResult <cimport,nodecl> end
global function blContextSetFillRule(self: *BLContextCore, fillRule: uint32): BLResult <cimport,nodecl> end
global function blContextSetStrokeAlpha(self: *BLContextCore, alpha: float64): BLResult <cimport,nodecl> end
global function blContextGetStrokeStyle(self: *BLContextCore, styleOut: *BLStyleCore): BLResult <cimport,nodecl> end
global function blContextSetStrokeStyle(self: *BLContextCore, style: *BLStyleCore): BLResult <cimport,nodecl> end
global function blContextSetStrokeStyleRgba(self: *BLContextCore, rgba: *BLRgba): BLResult <cimport,nodecl> end
global function blContextSetStrokeStyleRgba32(self: *BLContextCore, rgba32: uint32): BLResult <cimport,nodecl> end
global function blContextSetStrokeStyleRgba64(self: *BLContextCore, rgba64: uint64): BLResult <cimport,nodecl> end
global function blContextSetStrokeStyleObject(self: *BLContextCore, object: pointer): BLResult <cimport,nodecl> end
global function blContextSetStrokeWidth(self: *BLContextCore, width: float64): BLResult <cimport,nodecl> end
global function blContextSetStrokeMiterLimit(self: *BLContextCore, miterLimit: float64): BLResult <cimport,nodecl> end
global function blContextSetStrokeCap(self: *BLContextCore, position: uint32, strokeCap: uint32): BLResult <cimport,nodecl> end
global function blContextSetStrokeCaps(self: *BLContextCore, strokeCap: uint32): BLResult <cimport,nodecl> end
global function blContextSetStrokeJoin(self: *BLContextCore, strokeJoin: uint32): BLResult <cimport,nodecl> end
global function blContextSetStrokeDashOffset(self: *BLContextCore, dashOffset: float64): BLResult <cimport,nodecl> end
global function blContextSetStrokeDashArray(self: *BLContextCore, dashArray: *BLArrayCore): BLResult <cimport,nodecl> end
global function blContextSetStrokeTransformOrder(self: *BLContextCore, transformOrder: uint32): BLResult <cimport,nodecl> end
global function blContextGetStrokeOptions(self: *BLContextCore, options: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blContextSetStrokeOptions(self: *BLContextCore, options: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blContextClipToRectI(self: *BLContextCore, rect: *BLRectI): BLResult <cimport,nodecl> end
global function blContextClipToRectD(self: *BLContextCore, rect: *BLRect): BLResult <cimport,nodecl> end
global function blContextRestoreClipping(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextClearAll(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextClearRectI(self: *BLContextCore, rect: *BLRectI): BLResult <cimport,nodecl> end
global function blContextClearRectD(self: *BLContextCore, rect: *BLRect): BLResult <cimport,nodecl> end
global function blContextFillAll(self: *BLContextCore): BLResult <cimport,nodecl> end
global function blContextFillRectI(self: *BLContextCore, rect: *BLRectI): BLResult <cimport,nodecl> end
global function blContextFillRectD(self: *BLContextCore, rect: *BLRect): BLResult <cimport,nodecl> end
global function blContextFillPathD(self: *BLContextCore, path: *BLPathCore): BLResult <cimport,nodecl> end
global function blContextFillGeometry(self: *BLContextCore, geometryType: uint32, geometryData: pointer): BLResult <cimport,nodecl> end
global function blContextFillTextI(self: *BLContextCore, pt: *BLPointI, font: *BLFontCore, text: pointer, size: csize, encoding: uint32): BLResult <cimport,nodecl> end
global function blContextFillTextD(self: *BLContextCore, pt: *BLPoint, font: *BLFontCore, text: pointer, size: csize, encoding: uint32): BLResult <cimport,nodecl> end
global function blContextFillGlyphRunI(self: *BLContextCore, pt: *BLPointI, font: *BLFontCore, glyphRun: *BLGlyphRun): BLResult <cimport,nodecl> end
global function blContextFillGlyphRunD(self: *BLContextCore, pt: *BLPoint, font: *BLFontCore, glyphRun: *BLGlyphRun): BLResult <cimport,nodecl> end
global function blContextStrokeRectI(self: *BLContextCore, rect: *BLRectI): BLResult <cimport,nodecl> end
global function blContextStrokeRectD(self: *BLContextCore, rect: *BLRect): BLResult <cimport,nodecl> end
global function blContextStrokePathD(self: *BLContextCore, path: *BLPathCore): BLResult <cimport,nodecl> end
global function blContextStrokeGeometry(self: *BLContextCore, geometryType: uint32, geometryData: pointer): BLResult <cimport,nodecl> end
global function blContextStrokeTextI(self: *BLContextCore, pt: *BLPointI, font: *BLFontCore, text: pointer, size: csize, encoding: uint32): BLResult <cimport,nodecl> end
global function blContextStrokeTextD(self: *BLContextCore, pt: *BLPoint, font: *BLFontCore, text: pointer, size: csize, encoding: uint32): BLResult <cimport,nodecl> end
global function blContextStrokeGlyphRunI(self: *BLContextCore, pt: *BLPointI, font: *BLFontCore, glyphRun: *BLGlyphRun): BLResult <cimport,nodecl> end
global function blContextStrokeGlyphRunD(self: *BLContextCore, pt: *BLPoint, font: *BLFontCore, glyphRun: *BLGlyphRun): BLResult <cimport,nodecl> end
global function blContextBlitImageI(self: *BLContextCore, pt: *BLPointI, img: *BLImageCore, imgArea: *BLRectI): BLResult <cimport,nodecl> end
global function blContextBlitImageD(self: *BLContextCore, pt: *BLPoint, img: *BLImageCore, imgArea: *BLRectI): BLResult <cimport,nodecl> end
global function blContextBlitScaledImageI(self: *BLContextCore, rect: *BLRectI, img: *BLImageCore, imgArea: *BLRectI): BLResult <cimport,nodecl> end
global function blContextBlitScaledImageD(self: *BLContextCore, rect: *BLRect, img: *BLImageCore, imgArea: *BLRectI): BLResult <cimport,nodecl> end
global function blFileInit(self: *BLFileCore): BLResult <cimport,nodecl> end
global function blFileReset(self: *BLFileCore): BLResult <cimport,nodecl> end
global function blFileOpen(self: *BLFileCore, fileName: cstring, openFlags: uint32): BLResult <cimport,nodecl> end
global function blFileClose(self: *BLFileCore): BLResult <cimport,nodecl> end
global function blFileSeek(self: *BLFileCore, offset: int64, seekType: uint32, positionOut: *int64): BLResult <cimport,nodecl> end
global function blFileRead(self: *BLFileCore, buffer: pointer, n: csize, bytesReadOut: *csize): BLResult <cimport,nodecl> end
global function blFileWrite(self: *BLFileCore, buffer: pointer, n: csize, bytesWrittenOut: *csize): BLResult <cimport,nodecl> end
global function blFileTruncate(self: *BLFileCore, maxSize: int64): BLResult <cimport,nodecl> end
global function blFileGetSize(self: *BLFileCore, fileSizeOut: *uint64): BLResult <cimport,nodecl> end
global function blFileSystemReadFile(fileName: cstring, dst: *BLArrayCore, maxSize: csize, readFlags: uint32): BLResult <cimport,nodecl> end
global function blFileSystemWriteFile(fileName: cstring, data: pointer, size: csize, bytesWrittenOut: *csize): BLResult <cimport,nodecl> end
global function blFontInit(self: *BLFontCore): BLResult <cimport,nodecl> end
global function blFontDestroy(self: *BLFontCore): BLResult <cimport,nodecl> end
global function blFontReset(self: *BLFontCore): BLResult <cimport,nodecl> end
global function blFontAssignMove(self: *BLFontCore, other: *BLFontCore): BLResult <cimport,nodecl> end
global function blFontAssignWeak(self: *BLFontCore, other: *BLFontCore): BLResult <cimport,nodecl> end
global function blFontEquals(a: *BLFontCore, b: *BLFontCore): boolean <cimport,nodecl> end
global function blFontCreateFromFace(self: *BLFontCore, face: *BLFontFaceCore, size: float32): BLResult <cimport,nodecl> end
global function blFontShape(self: *BLFontCore, gb: *BLGlyphBufferCore): BLResult <cimport,nodecl> end
global function blFontMapTextToGlyphs(self: *BLFontCore, gb: *BLGlyphBufferCore, stateOut: *BLGlyphMappingState): BLResult <cimport,nodecl> end
global function blFontPositionGlyphs(self: *BLFontCore, gb: *BLGlyphBufferCore, positioningFlags: uint32): BLResult <cimport,nodecl> end
global function blFontApplyKerning(self: *BLFontCore, gb: *BLGlyphBufferCore): BLResult <cimport,nodecl> end
global function blFontApplyGSub(self: *BLFontCore, gb: *BLGlyphBufferCore, index: csize, lookups: culong): BLResult <cimport,nodecl> end
global function blFontApplyGPos(self: *BLFontCore, gb: *BLGlyphBufferCore, index: csize, lookups: culong): BLResult <cimport,nodecl> end
global function blFontGetMatrix(self: *BLFontCore, out: *BLFontMatrix): BLResult <cimport,nodecl> end
global function blFontGetMetrics(self: *BLFontCore, out: *BLFontMetrics): BLResult <cimport,nodecl> end
global function blFontGetDesignMetrics(self: *BLFontCore, out: *BLFontDesignMetrics): BLResult <cimport,nodecl> end
global function blFontGetTextMetrics(self: *BLFontCore, gb: *BLGlyphBufferCore, out: *BLTextMetrics): BLResult <cimport,nodecl> end
global function blFontGetGlyphBounds(self: *BLFontCore, glyphData: *uint32, glyphAdvance: isize, out: *BLBoxI, count: csize): BLResult <cimport,nodecl> end
global function blFontGetGlyphAdvances(self: *BLFontCore, glyphData: *uint32, glyphAdvance: isize, out: *BLGlyphPlacement, count: csize): BLResult <cimport,nodecl> end
global function blFontGetGlyphOutlines(self: *BLFontCore, glyphId: uint32, userMatrix: *BLMatrix2D, out: *BLPathCore, sink: BLPathSinkFunc, closure: pointer): BLResult <cimport,nodecl> end
global function blFontGetGlyphRunOutlines(self: *BLFontCore, glyphRun: *BLGlyphRun, userMatrix: *BLMatrix2D, out: *BLPathCore, sink: BLPathSinkFunc, closure: pointer): BLResult <cimport,nodecl> end
global function blFontDataInit(self: *BLFontDataCore): BLResult <cimport,nodecl> end
global function blFontDataDestroy(self: *BLFontDataCore): BLResult <cimport,nodecl> end
global function blFontDataReset(self: *BLFontDataCore): BLResult <cimport,nodecl> end
global function blFontDataAssignMove(self: *BLFontDataCore, other: *BLFontDataCore): BLResult <cimport,nodecl> end
global function blFontDataAssignWeak(self: *BLFontDataCore, other: *BLFontDataCore): BLResult <cimport,nodecl> end
global function blFontDataCreateFromFile(self: *BLFontDataCore, fileName: cstring, readFlags: uint32): BLResult <cimport,nodecl> end
global function blFontDataCreateFromDataArray(self: *BLFontDataCore, dataArray: *BLArrayCore): BLResult <cimport,nodecl> end
global function blFontDataCreateFromData(self: *BLFontDataCore, data: pointer, dataSize: csize, destroyFunc: BLDestroyImplFunc, destroyData: pointer): BLResult <cimport,nodecl> end
global function blFontDataEquals(a: *BLFontDataCore, b: *BLFontDataCore): boolean <cimport,nodecl> end
global function blFontDataListTags(self: *BLFontDataCore, faceIndex: uint32, dst: *BLArrayCore): BLResult <cimport,nodecl> end
global function blFontDataQueryTables(self: *BLFontDataCore, faceIndex: uint32, dst: *BLFontTable, tags: *cuint, count: csize): csize <cimport,nodecl> end
global function blFontFaceInit(self: *BLFontFaceCore): BLResult <cimport,nodecl> end
global function blFontFaceDestroy(self: *BLFontFaceCore): BLResult <cimport,nodecl> end
global function blFontFaceReset(self: *BLFontFaceCore): BLResult <cimport,nodecl> end
global function blFontFaceAssignMove(self: *BLFontFaceCore, other: *BLFontFaceCore): BLResult <cimport,nodecl> end
global function blFontFaceAssignWeak(self: *BLFontFaceCore, other: *BLFontFaceCore): BLResult <cimport,nodecl> end
global function blFontFaceEquals(a: *BLFontFaceCore, b: *BLFontFaceCore): boolean <cimport,nodecl> end
global function blFontFaceCreateFromFile(self: *BLFontFaceCore, fileName: cstring, readFlags: uint32): BLResult <cimport,nodecl> end
global function blFontFaceCreateFromData(self: *BLFontFaceCore, fontData: *BLFontDataCore, faceIndex: uint32): BLResult <cimport,nodecl> end
global function blFontFaceGetFaceInfo(self: *BLFontFaceCore, out: *BLFontFaceInfo): BLResult <cimport,nodecl> end
global function blFontFaceGetDesignMetrics(self: *BLFontFaceCore, out: *BLFontDesignMetrics): BLResult <cimport,nodecl> end
global function blFontFaceGetUnicodeCoverage(self: *BLFontFaceCore, out: *BLFontUnicodeCoverage): BLResult <cimport,nodecl> end
global function blFontManagerInit(self: *BLFontManagerCore): BLResult <cimport,nodecl> end
global function blFontManagerInitNew(self: *BLFontManagerCore): BLResult <cimport,nodecl> end
global function blFontManagerDestroy(self: *BLFontManagerCore): BLResult <cimport,nodecl> end
global function blFontManagerReset(self: *BLFontManagerCore): BLResult <cimport,nodecl> end
global function blFontManagerAssignMove(self: *BLFontManagerCore, other: *BLFontManagerCore): BLResult <cimport,nodecl> end
global function blFontManagerAssignWeak(self: *BLFontManagerCore, other: *BLFontManagerCore): BLResult <cimport,nodecl> end
global function blFontManagerCreate(self: *BLFontManagerCore): BLResult <cimport,nodecl> end
global function blFontManagerGetFaceCount(self: *BLFontManagerCore): csize <cimport,nodecl> end
global function blFontManagerGetFamilyCount(self: *BLFontManagerCore): csize <cimport,nodecl> end
global function blFontManagerHasFace(self: *BLFontManagerCore, face: *BLFontFaceCore): boolean <cimport,nodecl> end
global function blFontManagerAddFace(self: *BLFontManagerCore, face: *BLFontFaceCore): BLResult <cimport,nodecl> end
global function blFontManagerQueryFace(self: *BLFontManagerCore, name: cstring, nameSize: csize, properties: *BLFontQueryProperties, out: *BLFontFaceCore): BLResult <cimport,nodecl> end
global function blFontManagerQueryFacesByFamilyName(self: *BLFontManagerCore, name: cstring, nameSize: csize, out: *BLArrayCore): BLResult <cimport,nodecl> end
global function blFontManagerEquals(a: *BLFontManagerCore, b: *BLFontManagerCore): boolean <cimport,nodecl> end
global function blFormatInfoQuery(self: *BLFormatInfo, format: uint32): BLResult <cimport,nodecl> end
global function blFormatInfoSanitize(self: *BLFormatInfo): BLResult <cimport,nodecl> end
global function blGlyphBufferInit(self: *BLGlyphBufferCore): BLResult <cimport,nodecl> end
global function blGlyphBufferInitMove(self: *BLGlyphBufferCore, other: *BLGlyphBufferCore): BLResult <cimport,nodecl> end
global function blGlyphBufferDestroy(self: *BLGlyphBufferCore): BLResult <cimport,nodecl> end
global function blGlyphBufferReset(self: *BLGlyphBufferCore): BLResult <cimport,nodecl> end
global function blGlyphBufferClear(self: *BLGlyphBufferCore): BLResult <cimport,nodecl> end
global function blGlyphBufferGetSize(self: *BLGlyphBufferCore): csize <cimport,nodecl> end
global function blGlyphBufferGetFlags(self: *BLGlyphBufferCore): uint32 <cimport,nodecl> end
global function blGlyphBufferGetGlyphRun(self: *BLGlyphBufferCore): *BLGlyphRun <cimport,nodecl> end
global function blGlyphBufferGetContent(self: *BLGlyphBufferCore): *uint32 <cimport,nodecl> end
global function blGlyphBufferGetInfoData(self: *BLGlyphBufferCore): *BLGlyphInfo <cimport,nodecl> end
global function blGlyphBufferGetPlacementData(self: *BLGlyphBufferCore): *BLGlyphPlacement <cimport,nodecl> end
global function blGlyphBufferSetText(self: *BLGlyphBufferCore, textData: pointer, size: csize, encoding: uint32): BLResult <cimport,nodecl> end
global function blGlyphBufferSetGlyphs(self: *BLGlyphBufferCore, glyphData: *uint32, size: csize): BLResult <cimport,nodecl> end
global function blGlyphBufferSetGlyphsFromStruct(self: *BLGlyphBufferCore, glyphData: pointer, size: csize, glyphIdSize: csize, glyphIdAdvance: isize): BLResult <cimport,nodecl> end
global function blGradientInit(self: *BLGradientCore): BLResult <cimport,nodecl> end
global function blGradientInitAs(self: *BLGradientCore, type: uint32, values: pointer, extendMode: uint32, stops: *BLGradientStop, n: csize, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blGradientDestroy(self: *BLGradientCore): BLResult <cimport,nodecl> end
global function blGradientReset(self: *BLGradientCore): BLResult <cimport,nodecl> end
global function blGradientAssignMove(self: *BLGradientCore, other: *BLGradientCore): BLResult <cimport,nodecl> end
global function blGradientAssignWeak(self: *BLGradientCore, other: *BLGradientCore): BLResult <cimport,nodecl> end
global function blGradientCreate(self: *BLGradientCore, type: uint32, values: pointer, extendMode: uint32, stops: *BLGradientStop, n: csize, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blGradientShrink(self: *BLGradientCore): BLResult <cimport,nodecl> end
global function blGradientReserve(self: *BLGradientCore, n: csize): BLResult <cimport,nodecl> end
global function blGradientGetType(self: *BLGradientCore): uint32 <cimport,nodecl> end
global function blGradientSetType(self: *BLGradientCore, type: uint32): BLResult <cimport,nodecl> end
global function blGradientGetValue(self: *BLGradientCore, index: csize): float64 <cimport,nodecl> end
global function blGradientSetValue(self: *BLGradientCore, index: csize, value: float64): BLResult <cimport,nodecl> end
global function blGradientSetValues(self: *BLGradientCore, index: csize, values: *float64, n: csize): BLResult <cimport,nodecl> end
global function blGradientGetExtendMode(self: *BLGradientCore): uint32 <cimport,nodecl> end
global function blGradientSetExtendMode(self: *BLGradientCore, extendMode: uint32): BLResult <cimport,nodecl> end
global function blGradientGetSize(self: *BLGradientCore): csize <cimport,nodecl> end
global function blGradientGetCapacity(self: *BLGradientCore): csize <cimport,nodecl> end
global function blGradientGetStops(self: *BLGradientCore): *BLGradientStop <cimport,nodecl> end
global function blGradientResetStops(self: *BLGradientCore): BLResult <cimport,nodecl> end
global function blGradientAssignStops(self: *BLGradientCore, stops: *BLGradientStop, n: csize): BLResult <cimport,nodecl> end
global function blGradientAddStopRgba32(self: *BLGradientCore, offset: float64, argb32: uint32): BLResult <cimport,nodecl> end
global function blGradientAddStopRgba64(self: *BLGradientCore, offset: float64, argb64: uint64): BLResult <cimport,nodecl> end
global function blGradientRemoveStop(self: *BLGradientCore, index: csize): BLResult <cimport,nodecl> end
global function blGradientRemoveStopByOffset(self: *BLGradientCore, offset: float64, all: uint32): BLResult <cimport,nodecl> end
global function blGradientRemoveStops(self: *BLGradientCore, rStart: csize, rEnd: csize): BLResult <cimport,nodecl> end
global function blGradientRemoveStopsFromTo(self: *BLGradientCore, offsetMin: float64, offsetMax: float64): BLResult <cimport,nodecl> end
global function blGradientReplaceStopRgba32(self: *BLGradientCore, index: csize, offset: float64, rgba32: uint32): BLResult <cimport,nodecl> end
global function blGradientReplaceStopRgba64(self: *BLGradientCore, index: csize, offset: float64, rgba64: uint64): BLResult <cimport,nodecl> end
global function blGradientIndexOfStop(self: *BLGradientCore, offset: float64): csize <cimport,nodecl> end
global function blGradientApplyMatrixOp(self: *BLGradientCore, opType: uint32, opData: pointer): BLResult <cimport,nodecl> end
global function blGradientEquals(a: *BLGradientCore, b: *BLGradientCore): boolean <cimport,nodecl> end
global function blImageInit(self: *BLImageCore): BLResult <cimport,nodecl> end
global function blImageInitAs(self: *BLImageCore, w: cint, h: cint, format: uint32): BLResult <cimport,nodecl> end
global function blImageInitAsFromData(self: *BLImageCore, w: cint, h: cint, format: uint32, pixelData: pointer, stride: isize, destroyFunc: BLDestroyImplFunc, destroyData: pointer): BLResult <cimport,nodecl> end
global function blImageDestroy(self: *BLImageCore): BLResult <cimport,nodecl> end
global function blImageReset(self: *BLImageCore): BLResult <cimport,nodecl> end
global function blImageAssignMove(self: *BLImageCore, other: *BLImageCore): BLResult <cimport,nodecl> end
global function blImageAssignWeak(self: *BLImageCore, other: *BLImageCore): BLResult <cimport,nodecl> end
global function blImageAssignDeep(self: *BLImageCore, other: *BLImageCore): BLResult <cimport,nodecl> end
global function blImageCreate(self: *BLImageCore, w: cint, h: cint, format: uint32): BLResult <cimport,nodecl> end
global function blImageCreateFromData(self: *BLImageCore, w: cint, h: cint, format: uint32, pixelData: pointer, stride: isize, destroyFunc: BLDestroyImplFunc, destroyData: pointer): BLResult <cimport,nodecl> end
global function blImageGetData(self: *BLImageCore, dataOut: *BLImageData): BLResult <cimport,nodecl> end
global function blImageMakeMutable(self: *BLImageCore, dataOut: *BLImageData): BLResult <cimport,nodecl> end
global function blImageConvert(self: *BLImageCore, format: uint32): BLResult <cimport,nodecl> end
global function blImageEquals(a: *BLImageCore, b: *BLImageCore): boolean <cimport,nodecl> end
global function blImageScale(dst: *BLImageCore, src: *BLImageCore, size: *BLSizeI, filter: uint32, options: *BLImageScaleOptions): BLResult <cimport,nodecl> end
global function blImageReadFromFile(self: *BLImageCore, fileName: cstring, codecs: *BLArrayCore): BLResult <cimport,nodecl> end
global function blImageReadFromData(self: *BLImageCore, data: pointer, size: csize, codecs: *BLArrayCore): BLResult <cimport,nodecl> end
global function blImageWriteToFile(self: *BLImageCore, fileName: cstring, codec: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageWriteToData(self: *BLImageCore, dst: *BLArrayCore, codec: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageCodecInit(self: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageCodecDestroy(self: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageCodecReset(self: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageCodecAssignWeak(self: *BLImageCodecCore, other: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageCodecFindByName(self: *BLImageCodecCore, name: cstring, size: csize, codecs: *BLArrayCore): BLResult <cimport,nodecl> end
global function blImageCodecFindByExtension(self: *BLImageCodecCore, name: cstring, size: csize, codecs: *BLArrayCore): BLResult <cimport,nodecl> end
global function blImageCodecFindByData(self: *BLImageCodecCore, data: pointer, size: csize, codecs: *BLArrayCore): BLResult <cimport,nodecl> end
global function blImageCodecInspectData(self: *BLImageCodecCore, data: pointer, size: csize): uint32 <cimport,nodecl> end
global function blImageCodecCreateDecoder(self: *BLImageCodecCore, dst: *BLImageDecoderCore): BLResult <cimport,nodecl> end
global function blImageCodecCreateEncoder(self: *BLImageCodecCore, dst: *BLImageEncoderCore): BLResult <cimport,nodecl> end
global function blImageCodecArrayInitBuiltInCodecs(self: *BLArrayCore): BLResult <cimport,nodecl> end
global function blImageCodecArrayAssignBuiltInCodecs(self: *BLArrayCore): BLResult <cimport,nodecl> end
global function blImageCodecAddToBuiltIn(codec: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageCodecRemoveFromBuiltIn(codec: *BLImageCodecCore): BLResult <cimport,nodecl> end
global function blImageDecoderInit(self: *BLImageDecoderCore): BLResult <cimport,nodecl> end
global function blImageDecoderDestroy(self: *BLImageDecoderCore): BLResult <cimport,nodecl> end
global function blImageDecoderReset(self: *BLImageDecoderCore): BLResult <cimport,nodecl> end
global function blImageDecoderAssignMove(self: *BLImageDecoderCore, other: *BLImageDecoderCore): BLResult <cimport,nodecl> end
global function blImageDecoderAssignWeak(self: *BLImageDecoderCore, other: *BLImageDecoderCore): BLResult <cimport,nodecl> end
global function blImageDecoderRestart(self: *BLImageDecoderCore): BLResult <cimport,nodecl> end
global function blImageDecoderReadInfo(self: *BLImageDecoderCore, infoOut: *BLImageInfo, data: *uint8, size: csize): BLResult <cimport,nodecl> end
global function blImageDecoderReadFrame(self: *BLImageDecoderCore, imageOut: *BLImageCore, data: *uint8, size: csize): BLResult <cimport,nodecl> end
global function blImageEncoderInit(self: *BLImageEncoderCore): BLResult <cimport,nodecl> end
global function blImageEncoderDestroy(self: *BLImageEncoderCore): BLResult <cimport,nodecl> end
global function blImageEncoderReset(self: *BLImageEncoderCore): BLResult <cimport,nodecl> end
global function blImageEncoderAssignMove(self: *BLImageEncoderCore, other: *BLImageEncoderCore): BLResult <cimport,nodecl> end
global function blImageEncoderAssignWeak(self: *BLImageEncoderCore, other: *BLImageEncoderCore): BLResult <cimport,nodecl> end
global function blImageEncoderRestart(self: *BLImageEncoderCore): BLResult <cimport,nodecl> end
global function blImageEncoderWriteFrame(self: *BLImageEncoderCore, dst: *BLArrayCore, image: *BLImageCore): BLResult <cimport,nodecl> end
global function blMatrix2DSetIdentity(self: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blMatrix2DSetTranslation(self: *BLMatrix2D, x: float64, y: float64): BLResult <cimport,nodecl> end
global function blMatrix2DSetScaling(self: *BLMatrix2D, x: float64, y: float64): BLResult <cimport,nodecl> end
global function blMatrix2DSetSkewing(self: *BLMatrix2D, x: float64, y: float64): BLResult <cimport,nodecl> end
global function blMatrix2DSetRotation(self: *BLMatrix2D, angle: float64, cx: float64, cy: float64): BLResult <cimport,nodecl> end
global function blMatrix2DApplyOp(self: *BLMatrix2D, opType: uint32, opData: pointer): BLResult <cimport,nodecl> end
global function blMatrix2DInvert(dst: *BLMatrix2D, src: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blMatrix2DGetType(self: *BLMatrix2D): uint32 <cimport,nodecl> end
global function blMatrix2DMapPointDArray(self: *BLMatrix2D, dst: *BLPoint, src: *BLPoint, count: csize): BLResult <cimport,nodecl> end
global function blPathInit(self: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathDestroy(self: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathReset(self: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathGetSize(self: *BLPathCore): csize <cimport,nodecl> end
global function blPathGetCapacity(self: *BLPathCore): csize <cimport,nodecl> end
global function blPathGetCommandData(self: *BLPathCore): *uint8 <cimport,nodecl> end
global function blPathGetVertexData(self: *BLPathCore): *BLPoint <cimport,nodecl> end
global function blPathClear(self: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathShrink(self: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathReserve(self: *BLPathCore, n: csize): BLResult <cimport,nodecl> end
global function blPathModifyOp(self: *BLPathCore, op: uint32, n: csize, cmdDataOut: **uint8, vtxDataOut: **BLPoint): BLResult <cimport,nodecl> end
global function blPathAssignMove(self: *BLPathCore, other: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathAssignWeak(self: *BLPathCore, other: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathAssignDeep(self: *BLPathCore, other: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathSetVertexAt(self: *BLPathCore, index: csize, cmd: uint32, x: float64, y: float64): BLResult <cimport,nodecl> end
global function blPathMoveTo(self: *BLPathCore, x0: float64, y0: float64): BLResult <cimport,nodecl> end
global function blPathLineTo(self: *BLPathCore, x1: float64, y1: float64): BLResult <cimport,nodecl> end
global function blPathPolyTo(self: *BLPathCore, poly: *BLPoint, count: csize): BLResult <cimport,nodecl> end
global function blPathQuadTo(self: *BLPathCore, x1: float64, y1: float64, x2: float64, y2: float64): BLResult <cimport,nodecl> end
global function blPathCubicTo(self: *BLPathCore, x1: float64, y1: float64, x2: float64, y2: float64, x3: float64, y3: float64): BLResult <cimport,nodecl> end
global function blPathSmoothQuadTo(self: *BLPathCore, x2: float64, y2: float64): BLResult <cimport,nodecl> end
global function blPathSmoothCubicTo(self: *BLPathCore, x2: float64, y2: float64, x3: float64, y3: float64): BLResult <cimport,nodecl> end
global function blPathArcTo(self: *BLPathCore, x: float64, y: float64, rx: float64, ry: float64, start: float64, sweep: float64, forceMoveTo: boolean): BLResult <cimport,nodecl> end
global function blPathArcQuadrantTo(self: *BLPathCore, x1: float64, y1: float64, x2: float64, y2: float64): BLResult <cimport,nodecl> end
global function blPathEllipticArcTo(self: *BLPathCore, rx: float64, ry: float64, xAxisRotation: float64, largeArcFlag: boolean, sweepFlag: boolean, x1: float64, y1: float64): BLResult <cimport,nodecl> end
global function blPathClose(self: *BLPathCore): BLResult <cimport,nodecl> end
global function blPathAddGeometry(self: *BLPathCore, geometryType: uint32, geometryData: pointer, m: *BLMatrix2D, dir: uint32): BLResult <cimport,nodecl> end
global function blPathAddBoxI(self: *BLPathCore, box: *BLBoxI, dir: uint32): BLResult <cimport,nodecl> end
global function blPathAddBoxD(self: *BLPathCore, box: *BLBox, dir: uint32): BLResult <cimport,nodecl> end
global function blPathAddRectI(self: *BLPathCore, rect: *BLRectI, dir: uint32): BLResult <cimport,nodecl> end
global function blPathAddRectD(self: *BLPathCore, rect: *BLRect, dir: uint32): BLResult <cimport,nodecl> end
global function blPathAddPath(self: *BLPathCore, other: *BLPathCore, range: *BLRange): BLResult <cimport,nodecl> end
global function blPathAddTranslatedPath(self: *BLPathCore, other: *BLPathCore, range: *BLRange, p: *BLPoint): BLResult <cimport,nodecl> end
global function blPathAddTransformedPath(self: *BLPathCore, other: *BLPathCore, range: *BLRange, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blPathAddReversedPath(self: *BLPathCore, other: *BLPathCore, range: *BLRange, reverseMode: uint32): BLResult <cimport,nodecl> end
global function blPathAddStrokedPath(self: *BLPathCore, other: *BLPathCore, range: *BLRange, options: *BLStrokeOptionsCore, approx: *BLApproximationOptions): BLResult <cimport,nodecl> end
global function blPathRemoveRange(self: *BLPathCore, range: *BLRange): BLResult <cimport,nodecl> end
global function blPathTranslate(self: *BLPathCore, range: *BLRange, p: *BLPoint): BLResult <cimport,nodecl> end
global function blPathTransform(self: *BLPathCore, range: *BLRange, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blPathFitTo(self: *BLPathCore, range: *BLRange, rect: *BLRect, fitFlags: uint32): BLResult <cimport,nodecl> end
global function blPathEquals(a: *BLPathCore, b: *BLPathCore): boolean <cimport,nodecl> end
global function blPathGetInfoFlags(self: *BLPathCore, flagsOut: *uint32): BLResult <cimport,nodecl> end
global function blPathGetControlBox(self: *BLPathCore, boxOut: *BLBox): BLResult <cimport,nodecl> end
global function blPathGetBoundingBox(self: *BLPathCore, boxOut: *BLBox): BLResult <cimport,nodecl> end
global function blPathGetFigureRange(self: *BLPathCore, index: csize, rangeOut: *BLRange): BLResult <cimport,nodecl> end
global function blPathGetLastVertex(self: *BLPathCore, vtxOut: *BLPoint): BLResult <cimport,nodecl> end
global function blPathGetClosestVertex(self: *BLPathCore, p: *BLPoint, maxDistance: float64, indexOut: *csize, distanceOut: *float64): BLResult <cimport,nodecl> end
global function blPathHitTest(self: *BLPathCore, p: *BLPoint, fillRule: uint32): uint32 <cimport,nodecl> end
global function blPatternInit(self: *BLPatternCore): BLResult <cimport,nodecl> end
global function blPatternInitAs(self: *BLPatternCore, image: *BLImageCore, area: *BLRectI, extendMode: uint32, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blPatternDestroy(self: *BLPatternCore): BLResult <cimport,nodecl> end
global function blPatternReset(self: *BLPatternCore): BLResult <cimport,nodecl> end
global function blPatternAssignMove(self: *BLPatternCore, other: *BLPatternCore): BLResult <cimport,nodecl> end
global function blPatternAssignWeak(self: *BLPatternCore, other: *BLPatternCore): BLResult <cimport,nodecl> end
global function blPatternAssignDeep(self: *BLPatternCore, other: *BLPatternCore): BLResult <cimport,nodecl> end
global function blPatternCreate(self: *BLPatternCore, image: *BLImageCore, area: *BLRectI, extendMode: uint32, m: *BLMatrix2D): BLResult <cimport,nodecl> end
global function blPatternSetImage(self: *BLPatternCore, image: *BLImageCore, area: *BLRectI): BLResult <cimport,nodecl> end
global function blPatternSetArea(self: *BLPatternCore, area: *BLRectI): BLResult <cimport,nodecl> end
global function blPatternSetExtendMode(self: *BLPatternCore, extendMode: uint32): BLResult <cimport,nodecl> end
global function blPatternApplyMatrixOp(self: *BLPatternCore, opType: uint32, opData: pointer): BLResult <cimport,nodecl> end
global function blPatternEquals(a: *BLPatternCore, b: *BLPatternCore): boolean <cimport,nodecl> end
global function blPixelConverterInit(self: *BLPixelConverterCore): BLResult <cimport,nodecl> end
global function blPixelConverterInitWeak(self: *BLPixelConverterCore, other: *BLPixelConverterCore): BLResult <cimport,nodecl> end
global function blPixelConverterDestroy(self: *BLPixelConverterCore): BLResult <cimport,nodecl> end
global function blPixelConverterReset(self: *BLPixelConverterCore): BLResult <cimport,nodecl> end
global function blPixelConverterAssign(self: *BLPixelConverterCore, other: *BLPixelConverterCore): BLResult <cimport,nodecl> end
global function blPixelConverterCreate(self: *BLPixelConverterCore, dstInfo: *BLFormatInfo, srcInfo: *BLFormatInfo, createFlags: uint32): BLResult <cimport,nodecl> end
global function blPixelConverterConvert(self: *BLPixelConverterCore, dstData: pointer, dstStride: isize, srcData: pointer, srcStride: isize, w: uint32, h: uint32, options: *BLPixelConverterOptions): BLResult <cimport,nodecl> end
global function blRandomReset(self: *BLRandom, seed: uint64): BLResult <cimport,nodecl> end
global function blRandomNextUInt32(self: *BLRandom): uint32 <cimport,nodecl> end
global function blRandomNextUInt64(self: *BLRandom): uint64 <cimport,nodecl> end
global function blRandomNextDouble(self: *BLRandom): float64 <cimport,nodecl> end
global function blRegionInit(self: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionDestroy(self: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionReset(self: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionGetSize(self: *BLRegionCore): csize <cimport,nodecl> end
global function blRegionGetCapacity(self: *BLRegionCore): csize <cimport,nodecl> end
global function blRegionGetData(self: *BLRegionCore): *BLBoxI <cimport,nodecl> end
global function blRegionClear(self: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionShrink(self: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionReserve(self: *BLRegionCore, n: csize): BLResult <cimport,nodecl> end
global function blRegionAssignMove(self: *BLRegionCore, other: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionAssignWeak(self: *BLRegionCore, other: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionAssignDeep(self: *BLRegionCore, other: *BLRegionCore): BLResult <cimport,nodecl> end
global function blRegionAssignBoxI(self: *BLRegionCore, src: *BLBoxI): BLResult <cimport,nodecl> end
global function blRegionAssignBoxIArray(self: *BLRegionCore, data: *BLBoxI, n: csize): BLResult <cimport,nodecl> end
global function blRegionAssignRectI(self: *BLRegionCore, rect: *BLRectI): BLResult <cimport,nodecl> end
global function blRegionAssignRectIArray(self: *BLRegionCore, data: *BLRectI, n: csize): BLResult <cimport,nodecl> end
global function blRegionCombine(self: *BLRegionCore, a: *BLRegionCore, b: *BLRegionCore, booleanOp: uint32): BLResult <cimport,nodecl> end
global function blRegionCombineRB(self: *BLRegionCore, a: *BLRegionCore, b: *BLBoxI, booleanOp: uint32): BLResult <cimport,nodecl> end
global function blRegionCombineBR(self: *BLRegionCore, a: *BLBoxI, b: *BLRegionCore, booleanOp: uint32): BLResult <cimport,nodecl> end
global function blRegionCombineBB(self: *BLRegionCore, a: *BLBoxI, b: *BLBoxI, booleanOp: uint32): BLResult <cimport,nodecl> end
global function blRegionTranslate(self: *BLRegionCore, r: *BLRegionCore, pt: *BLPointI): BLResult <cimport,nodecl> end
global function blRegionTranslateAndClip(self: *BLRegionCore, r: *BLRegionCore, pt: *BLPointI, clipBox: *BLBoxI): BLResult <cimport,nodecl> end
global function blRegionIntersectAndClip(self: *BLRegionCore, a: *BLRegionCore, b: *BLRegionCore, clipBox: *BLBoxI): BLResult <cimport,nodecl> end
global function blRegionEquals(a: *BLRegionCore, b: *BLRegionCore): boolean <cimport,nodecl> end
global function blRegionGetType(self: *BLRegionCore): uint32 <cimport,nodecl> end
global function blRegionHitTest(self: *BLRegionCore, pt: *BLPointI): uint32 <cimport,nodecl> end
global function blRegionHitTestBoxI(self: *BLRegionCore, box: *BLBoxI): uint32 <cimport,nodecl> end
global function blRuntimeInit(): BLResult <cimport,nodecl> end
global function blRuntimeShutdown(): BLResult <cimport,nodecl> end
global function blRuntimeCleanup(cleanupFlags: uint32): BLResult <cimport,nodecl> end
global function blRuntimeQueryInfo(infoType: uint32, infoOut: pointer): BLResult <cimport,nodecl> end
global function blRuntimeMessageOut(msg: cstring): BLResult <cimport,nodecl> end
global function blRuntimeMessageFmt(fmt: cstring, ...: cvarargs): BLResult <cimport,nodecl> end
global function blRuntimeMessageVFmt(fmt: cstring, ap: cvalist): BLResult <cimport,nodecl> end
global function blRuntimeAssertionFailure(file: cstring, line: cint, msg: cstring): void <cimport,nodecl> end
global function blResultFromPosixError(e: cint): BLResult <cimport,nodecl> end
global function blStringInit(self: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringInitWithData(self: *BLStringCore, str: cstring, size: csize): BLResult <cimport,nodecl> end
global function blStringDestroy(self: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringReset(self: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringGetSize(self: *BLStringCore): csize <cimport,nodecl> end
global function blStringGetCapacity(self: *BLStringCore): csize <cimport,nodecl> end
global function blStringGetData(self: *BLStringCore): cstring <cimport,nodecl> end
global function blStringClear(self: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringShrink(self: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringReserve(self: *BLStringCore, n: csize): BLResult <cimport,nodecl> end
global function blStringResize(self: *BLStringCore, n: csize, fill: cchar): BLResult <cimport,nodecl> end
global function blStringMakeMutable(self: *BLStringCore, dataOut: *cstring): BLResult <cimport,nodecl> end
global function blStringModifyOp(self: *BLStringCore, op: uint32, n: csize, dataOut: *cstring): BLResult <cimport,nodecl> end
global function blStringInsertOp(self: *BLStringCore, index: csize, n: csize, dataOut: *cstring): BLResult <cimport,nodecl> end
global function blStringAssignMove(self: *BLStringCore, other: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringAssignWeak(self: *BLStringCore, other: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringAssignDeep(self: *BLStringCore, other: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringAssignData(self: *BLStringCore, str: cstring, n: csize): BLResult <cimport,nodecl> end
global function blStringApplyOpChar(self: *BLStringCore, op: uint32, c: cchar, n: csize): BLResult <cimport,nodecl> end
global function blStringApplyOpData(self: *BLStringCore, op: uint32, str: cstring, n: csize): BLResult <cimport,nodecl> end
global function blStringApplyOpString(self: *BLStringCore, op: uint32, other: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringApplyOpFormat(self: *BLStringCore, op: uint32, fmt: cstring, ...: cvarargs): BLResult <cimport,nodecl> end
global function blStringApplyOpFormatV(self: *BLStringCore, op: uint32, fmt: cstring, ap: cvalist): BLResult <cimport,nodecl> end
global function blStringInsertChar(self: *BLStringCore, index: csize, c: cchar, n: csize): BLResult <cimport,nodecl> end
global function blStringInsertData(self: *BLStringCore, index: csize, str: cstring, n: csize): BLResult <cimport,nodecl> end
global function blStringInsertString(self: *BLStringCore, index: csize, other: *BLStringCore): BLResult <cimport,nodecl> end
global function blStringRemoveRange(self: *BLStringCore, rStart: csize, rEnd: csize): BLResult <cimport,nodecl> end
global function blStringEquals(self: *BLStringCore, other: *BLStringCore): boolean <cimport,nodecl> end
global function blStringEqualsData(self: *BLStringCore, str: cstring, n: csize): boolean <cimport,nodecl> end
global function blStringCompare(self: *BLStringCore, other: *BLStringCore): cint <cimport,nodecl> end
global function blStringCompareData(self: *BLStringCore, str: cstring, n: csize): cint <cimport,nodecl> end
global function blStrokeOptionsInit(self: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blStrokeOptionsInitMove(self: *BLStrokeOptionsCore, other: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blStrokeOptionsInitWeak(self: *BLStrokeOptionsCore, other: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blStrokeOptionsDestroy(self: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blStrokeOptionsReset(self: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blStrokeOptionsAssignMove(self: *BLStrokeOptionsCore, other: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blStrokeOptionsAssignWeak(self: *BLStrokeOptionsCore, other: *BLStrokeOptionsCore): BLResult <cimport,nodecl> end
global function blStyleInit(self: *BLStyleCore): BLResult <cimport,nodecl> end
global function blStyleInitMove(self: *BLStyleCore, other: *BLStyleCore): BLResult <cimport,nodecl> end
global function blStyleInitWeak(self: *BLStyleCore, other: *BLStyleCore): BLResult <cimport,nodecl> end
global function blStyleInitRgba(self: *BLStyleCore, rgba: *BLRgba): BLResult <cimport,nodecl> end
global function blStyleInitRgba32(self: *BLStyleCore, rgba32: uint32): BLResult <cimport,nodecl> end
global function blStyleInitRgba64(self: *BLStyleCore, rgba64: uint64): BLResult <cimport,nodecl> end
global function blStyleInitObject(self: *BLStyleCore, object: pointer): BLResult <cimport,nodecl> end
global function blStyleDestroy(self: *BLStyleCore): BLResult <cimport,nodecl> end
global function blStyleReset(self: *BLStyleCore): BLResult <cimport,nodecl> end
global function blStyleAssignMove(self: *BLStyleCore, other: *BLStyleCore): BLResult <cimport,nodecl> end
global function blStyleAssignWeak(self: *BLStyleCore, other: *BLStyleCore): BLResult <cimport,nodecl> end
global function blStyleAssignRgba(self: *BLStyleCore, rgba: *BLRgba): BLResult <cimport,nodecl> end
global function blStyleAssignRgba32(self: *BLStyleCore, rgba32: uint32): BLResult <cimport,nodecl> end
global function blStyleAssignRgba64(self: *BLStyleCore, rgba64: uint64): BLResult <cimport,nodecl> end
global function blStyleAssignObject(self: *BLStyleCore, object: pointer): BLResult <cimport,nodecl> end
global function blStyleGetType(self: *BLStyleCore): uint32 <cimport,nodecl> end
global function blStyleGetRgba(self: *BLStyleCore, rgbaOut: *BLRgba): BLResult <cimport,nodecl> end
global function blStyleGetRgba32(self: *BLStyleCore, rgba32Out: *uint32): BLResult <cimport,nodecl> end
global function blStyleGetRgba64(self: *BLStyleCore, rgba64Out: *uint64): BLResult <cimport,nodecl> end
global function blStyleGetObject(self: *BLStyleCore, object: pointer): BLResult <cimport,nodecl> end
global function blStyleEquals(a: *BLStyleCore, b: *BLStyleCore): boolean <cimport,nodecl> end
global function blVariantInit(self: pointer): BLResult <cimport,nodecl> end
global function blVariantInitMove(self: pointer, other: pointer): BLResult <cimport,nodecl> end
global function blVariantInitWeak(self: pointer, other: pointer): BLResult <cimport,nodecl> end
global function blVariantDestroy(self: pointer): BLResult <cimport,nodecl> end
global function blVariantReset(self: pointer): BLResult <cimport,nodecl> end
global function blVariantGetImplType(self: pointer): uint32 <cimport,nodecl> end
global function blVariantAssignMove(self: pointer, other: pointer): BLResult <cimport,nodecl> end
global function blVariantAssignWeak(self: pointer, other: pointer): BLResult <cimport,nodecl> end
global function blVariantEquals(a: pointer, b: pointer): boolean <cimport,nodecl> end
global BLImplType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_IMPL_TYPE_NULL = 0,
  BL_IMPL_TYPE_ARRAY_VAR = 1,
  BL_IMPL_TYPE_ARRAY_I8 = 2,
  BL_IMPL_TYPE_ARRAY_U8 = 3,
  BL_IMPL_TYPE_ARRAY_I16 = 4,
  BL_IMPL_TYPE_ARRAY_U16 = 5,
  BL_IMPL_TYPE_ARRAY_I32 = 6,
  BL_IMPL_TYPE_ARRAY_U32 = 7,
  BL_IMPL_TYPE_ARRAY_I64 = 8,
  BL_IMPL_TYPE_ARRAY_U64 = 9,
  BL_IMPL_TYPE_ARRAY_F32 = 10,
  BL_IMPL_TYPE_ARRAY_F64 = 11,
  BL_IMPL_TYPE_ARRAY_STRUCT_1 = 12,
  BL_IMPL_TYPE_ARRAY_STRUCT_2 = 13,
  BL_IMPL_TYPE_ARRAY_STRUCT_3 = 14,
  BL_IMPL_TYPE_ARRAY_STRUCT_4 = 15,
  BL_IMPL_TYPE_ARRAY_STRUCT_6 = 16,
  BL_IMPL_TYPE_ARRAY_STRUCT_8 = 17,
  BL_IMPL_TYPE_ARRAY_STRUCT_10 = 18,
  BL_IMPL_TYPE_ARRAY_STRUCT_12 = 19,
  BL_IMPL_TYPE_ARRAY_STRUCT_16 = 20,
  BL_IMPL_TYPE_ARRAY_STRUCT_20 = 21,
  BL_IMPL_TYPE_ARRAY_STRUCT_24 = 22,
  BL_IMPL_TYPE_ARRAY_STRUCT_32 = 23,
  BL_IMPL_TYPE_BIT_ARRAY = 32,
  BL_IMPL_TYPE_BIT_SET = 33,
  BL_IMPL_TYPE_STRING = 39,
  BL_IMPL_TYPE_PATH = 40,
  BL_IMPL_TYPE_REGION = 43,
  BL_IMPL_TYPE_IMAGE = 44,
  BL_IMPL_TYPE_IMAGE_CODEC = 45,
  BL_IMPL_TYPE_IMAGE_DECODER = 46,
  BL_IMPL_TYPE_IMAGE_ENCODER = 47,
  BL_IMPL_TYPE_GRADIENT = 48,
  BL_IMPL_TYPE_PATTERN = 49,
  BL_IMPL_TYPE_CONTEXT = 55,
  BL_IMPL_TYPE_FONT = 56,
  BL_IMPL_TYPE_FONT_FACE = 57,
  BL_IMPL_TYPE_FONT_DATA = 58,
  BL_IMPL_TYPE_FONT_MANAGER = 59,
  BL_IMPL_TYPE_FONT_FEATURE_OPTIONS = 60,
  BL_IMPL_TYPE_FONT_VARIATION_OPTIONS = 61,
  BL_IMPL_TYPE_COUNT = 64
}
global BLImplTraits: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_IMPL_TRAIT_MUTABLE = 1,
  BL_IMPL_TRAIT_IMMUTABLE = 2,
  BL_IMPL_TRAIT_EXTERNAL = 4,
  BL_IMPL_TRAIT_FOREIGN = 8,
  BL_IMPL_TRAIT_VIRT = 16,
  BL_IMPL_TRAIT_NULL = 128
}
BLVariantImpl = @record{
  __unnamed1: union{
    virt: pointer,
    unknownHeaderData: usize
  },
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  reserved: [4]uint8
}
BLVariantCore = @record{
  impl: *BLVariantImpl
}
global blNone: [64]BLVariantCore <cimport,nodecl>
BLArrayImpl = @record{
  capacity: csize,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  itemSize: uint8,
  dispatchType: uint8,
  reserved: [2]uint8,
  __unnamed1: union{
    __unnamed1: record{
      data: pointer,
      size: csize
    },
    view: BLDataView
  }
}
BLArrayCore = @record{
  impl: *BLArrayImpl
}
global BLGeometryDirection: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_GEOMETRY_DIRECTION_NONE = 0,
  BL_GEOMETRY_DIRECTION_CW = 1,
  BL_GEOMETRY_DIRECTION_CCW = 2
}
global BLGeometryType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_GEOMETRY_TYPE_NONE = 0,
  BL_GEOMETRY_TYPE_BOXI = 1,
  BL_GEOMETRY_TYPE_BOXD = 2,
  BL_GEOMETRY_TYPE_RECTI = 3,
  BL_GEOMETRY_TYPE_RECTD = 4,
  BL_GEOMETRY_TYPE_CIRCLE = 5,
  BL_GEOMETRY_TYPE_ELLIPSE = 6,
  BL_GEOMETRY_TYPE_ROUND_RECT = 7,
  BL_GEOMETRY_TYPE_ARC = 8,
  BL_GEOMETRY_TYPE_CHORD = 9,
  BL_GEOMETRY_TYPE_PIE = 10,
  BL_GEOMETRY_TYPE_LINE = 11,
  BL_GEOMETRY_TYPE_TRIANGLE = 12,
  BL_GEOMETRY_TYPE_POLYLINEI = 13,
  BL_GEOMETRY_TYPE_POLYLINED = 14,
  BL_GEOMETRY_TYPE_POLYGONI = 15,
  BL_GEOMETRY_TYPE_POLYGOND = 16,
  BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXI = 17,
  BL_GEOMETRY_TYPE_ARRAY_VIEW_BOXD = 18,
  BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTI = 19,
  BL_GEOMETRY_TYPE_ARRAY_VIEW_RECTD = 20,
  BL_GEOMETRY_TYPE_PATH = 21,
  BL_GEOMETRY_TYPE_REGION = 22,
  BL_GEOMETRY_TYPE_COUNT = 23,
  BL_GEOMETRY_TYPE_SIMPLE_LAST = 12
}
global BLFillRule: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FILL_RULE_NON_ZERO = 0,
  BL_FILL_RULE_EVEN_ODD = 1,
  BL_FILL_RULE_COUNT = 2
}
global BLHitTest: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_HIT_TEST_IN = 0,
  BL_HIT_TEST_PART = 1,
  BL_HIT_TEST_OUT = 2,
  BL_HIT_TEST_INVALID = 4294967295
}
BLPointI = @record{
  x: cint,
  y: cint
}
BLSizeI = @record{
  w: cint,
  h: cint
}
BLBoxI = @record{
  x0: cint,
  y0: cint,
  x1: cint,
  y1: cint
}
BLRectI = @record{
  x: cint,
  y: cint,
  w: cint,
  h: cint
}
BLPoint = @record{
  x: float64,
  y: float64
}
BLSize = @record{
  w: float64,
  h: float64
}
BLBox = @record{
  x0: float64,
  y0: float64,
  x1: float64,
  y1: float64
}
BLRect = @record{
  x: float64,
  y: float64,
  w: float64,
  h: float64
}
BLLine = @record{
  x0: float64,
  y0: float64,
  x1: float64,
  y1: float64
}
BLTriangle = @record{
  x0: float64,
  y0: float64,
  x1: float64,
  y1: float64,
  x2: float64,
  y2: float64
}
BLRoundRect = @record{
  x: float64,
  y: float64,
  w: float64,
  h: float64,
  rx: float64,
  ry: float64
}
BLCircle = @record{
  cx: float64,
  cy: float64,
  r: float64
}
BLEllipse = @record{
  cx: float64,
  cy: float64,
  rx: float64,
  ry: float64
}
BLArc = @record{
  cx: float64,
  cy: float64,
  rx: float64,
  ry: float64,
  start: float64,
  sweep: float64
}
global BLGlyphPlacementType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_GLYPH_PLACEMENT_TYPE_NONE = 0,
  BL_GLYPH_PLACEMENT_TYPE_ADVANCE_OFFSET = 1,
  BL_GLYPH_PLACEMENT_TYPE_DESIGN_UNITS = 2,
  BL_GLYPH_PLACEMENT_TYPE_USER_UNITS = 3,
  BL_GLYPH_PLACEMENT_TYPE_ABSOLUTE_UNITS = 4
}
global BLGlyphRunFlags: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_GLYPH_RUN_FLAG_UCS4_CONTENT = 268435456,
  BL_GLYPH_RUN_FLAG_INVALID_TEXT = 536870912,
  BL_GLYPH_RUN_FLAG_UNDEFINED_GLYPHS = 1073741824,
  BL_GLYPH_RUN_FLAG_INVALID_FONT_DATA = 2147483648
}
global BLFontDataFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_DATA_FLAG_COLLECTION = 1
}
global BLFontFaceType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_FACE_TYPE_NONE = 0,
  BL_FONT_FACE_TYPE_OPENTYPE = 1,
  BL_FONT_FACE_TYPE_COUNT = 2
}
global BLFontFaceFlags: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_FONT_FACE_FLAG_TYPOGRAPHIC_NAMES = 1,
  BL_FONT_FACE_FLAG_TYPOGRAPHIC_METRICS = 2,
  BL_FONT_FACE_FLAG_CHAR_TO_GLYPH_MAPPING = 4,
  BL_FONT_FACE_FLAG_HORIZONTAL_METIRCS = 16,
  BL_FONT_FACE_FLAG_VERTICAL_METRICS = 32,
  BL_FONT_FACE_FLAG_HORIZONTAL_KERNING = 64,
  BL_FONT_FACE_FLAG_VERTICAL_KERNING = 128,
  BL_FONT_FACE_FLAG_OPENTYPE_FEATURES = 256,
  BL_FONT_FACE_FLAG_PANOSE_DATA = 512,
  BL_FONT_FACE_FLAG_UNICODE_COVERAGE = 1024,
  BL_FONT_FACE_FLAG_BASELINE_Y_EQUALS_0 = 4096,
  BL_FONT_FACE_FLAG_LSB_POINT_X_EQUALS_0 = 8192,
  BL_FONT_FACE_FLAG_VARIATION_SEQUENCES = 268435456,
  BL_FONT_FACE_FLAG_OPENTYPE_VARIATIONS = 536870912,
  BL_FONT_FACE_FLAG_SYMBOL_FONT = 1073741824,
  BL_FONT_FACE_FLAG_LAST_RESORT_FONT = 2147483648
}
global BLFontFaceDiagFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_FACE_DIAG_WRONG_NAME_DATA = 1,
  BL_FONT_FACE_DIAG_FIXED_NAME_DATA = 2,
  BL_FONT_FACE_DIAG_WRONG_KERN_DATA = 4,
  BL_FONT_FACE_DIAG_FIXED_KERN_DATA = 8,
  BL_FONT_FACE_DIAG_WRONG_CMAP_DATA = 16,
  BL_FONT_FACE_DIAG_WRONG_CMAP_FORMAT = 32,
  BL_FONT_FACE_DIAG_WRONG_GDEF_DATA = 256,
  BL_FONT_FACE_DIAG_WRONG_GPOS_DATA = 1024,
  BL_FONT_FACE_DIAG_WRONG_GSUB_DATA = 4096
}
global BLFontOutlineType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_OUTLINE_TYPE_NONE = 0,
  BL_FONT_OUTLINE_TYPE_TRUETYPE = 1,
  BL_FONT_OUTLINE_TYPE_CFF = 2,
  BL_FONT_OUTLINE_TYPE_CFF2 = 3
}
global BLFontStretch: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_STRETCH_ULTRA_CONDENSED = 1,
  BL_FONT_STRETCH_EXTRA_CONDENSED = 2,
  BL_FONT_STRETCH_CONDENSED = 3,
  BL_FONT_STRETCH_SEMI_CONDENSED = 4,
  BL_FONT_STRETCH_NORMAL = 5,
  BL_FONT_STRETCH_SEMI_EXPANDED = 6,
  BL_FONT_STRETCH_EXPANDED = 7,
  BL_FONT_STRETCH_EXTRA_EXPANDED = 8,
  BL_FONT_STRETCH_ULTRA_EXPANDED = 9
}
global BLFontStyle: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_STYLE_NORMAL = 0,
  BL_FONT_STYLE_OBLIQUE = 1,
  BL_FONT_STYLE_ITALIC = 2,
  BL_FONT_STYLE_COUNT = 3
}
global BLFontWeight: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_WEIGHT_THIN = 100,
  BL_FONT_WEIGHT_EXTRA_LIGHT = 200,
  BL_FONT_WEIGHT_LIGHT = 300,
  BL_FONT_WEIGHT_SEMI_LIGHT = 350,
  BL_FONT_WEIGHT_NORMAL = 400,
  BL_FONT_WEIGHT_MEDIUM = 500,
  BL_FONT_WEIGHT_SEMI_BOLD = 600,
  BL_FONT_WEIGHT_BOLD = 700,
  BL_FONT_WEIGHT_EXTRA_BOLD = 800,
  BL_FONT_WEIGHT_BLACK = 900,
  BL_FONT_WEIGHT_EXTRA_BLACK = 950
}
global BLFontStringId: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_STRING_COPYRIGHT_NOTICE = 0,
  BL_FONT_STRING_FAMILY_NAME = 1,
  BL_FONT_STRING_SUBFAMILY_NAME = 2,
  BL_FONT_STRING_UNIQUE_IDENTIFIER = 3,
  BL_FONT_STRING_FULL_NAME = 4,
  BL_FONT_STRING_VERSION_STRING = 5,
  BL_FONT_STRING_POST_SCRIPT_NAME = 6,
  BL_FONT_STRING_TRADEMARK = 7,
  BL_FONT_STRING_MANUFACTURER_NAME = 8,
  BL_FONT_STRING_DESIGNER_NAME = 9,
  BL_FONT_STRING_DESCRIPTION = 10,
  BL_FONT_STRING_VENDOR_URL = 11,
  BL_FONT_STRING_DESIGNER_URL = 12,
  BL_FONT_STRING_LICENSE_DESCRIPTION = 13,
  BL_FONT_STRING_LICENSE_INFO_URL = 14,
  BL_FONT_STRING_RESERVED = 15,
  BL_FONT_STRING_TYPOGRAPHIC_FAMILY_NAME = 16,
  BL_FONT_STRING_TYPOGRAPHIC_SUBFAMILY_NAME = 17,
  BL_FONT_STRING_COMPATIBLE_FULL_NAME = 18,
  BL_FONT_STRING_SAMPLE_TEXT = 19,
  BL_FONT_STRING_POST_SCRIPT_CID_NAME = 20,
  BL_FONT_STRING_WWS_FAMILY_NAME = 21,
  BL_FONT_STRING_WWS_SUBFAMILY_NAME = 22,
  BL_FONT_STRING_LIGHT_BACKGROUND_PALETTE = 23,
  BL_FONT_STRING_DARK_BACKGROUND_PALETTE = 24,
  BL_FONT_STRING_VARIATIONS_POST_SCRIPT_PREFIX = 25,
  BL_FONT_STRING_COMMON_COUNT = 26,
  BL_FONT_STRING_CUSTOM_START_INDEX = 255
}
global BLFontUnicodeCoverageIndex: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FONT_UC_INDEX_BASIC_LATIN = 0,
  BL_FONT_UC_INDEX_LATIN1_SUPPLEMENT = 1,
  BL_FONT_UC_INDEX_LATIN_EXTENDED_A = 2,
  BL_FONT_UC_INDEX_LATIN_EXTENDED_B = 3,
  BL_FONT_UC_INDEX_IPA_EXTENSIONS = 4,
  BL_FONT_UC_INDEX_SPACING_MODIFIER_LETTERS = 5,
  BL_FONT_UC_INDEX_COMBINING_DIACRITICAL_MARKS = 6,
  BL_FONT_UC_INDEX_GREEK_AND_COPTIC = 7,
  BL_FONT_UC_INDEX_COPTIC = 8,
  BL_FONT_UC_INDEX_CYRILLIC = 9,
  BL_FONT_UC_INDEX_ARMENIAN = 10,
  BL_FONT_UC_INDEX_HEBREW = 11,
  BL_FONT_UC_INDEX_VAI = 12,
  BL_FONT_UC_INDEX_ARABIC = 13,
  BL_FONT_UC_INDEX_NKO = 14,
  BL_FONT_UC_INDEX_DEVANAGARI = 15,
  BL_FONT_UC_INDEX_BENGALI = 16,
  BL_FONT_UC_INDEX_GURMUKHI = 17,
  BL_FONT_UC_INDEX_GUJARATI = 18,
  BL_FONT_UC_INDEX_ORIYA = 19,
  BL_FONT_UC_INDEX_TAMIL = 20,
  BL_FONT_UC_INDEX_TELUGU = 21,
  BL_FONT_UC_INDEX_KANNADA = 22,
  BL_FONT_UC_INDEX_MALAYALAM = 23,
  BL_FONT_UC_INDEX_THAI = 24,
  BL_FONT_UC_INDEX_LAO = 25,
  BL_FONT_UC_INDEX_GEORGIAN = 26,
  BL_FONT_UC_INDEX_BALINESE = 27,
  BL_FONT_UC_INDEX_HANGUL_JAMO = 28,
  BL_FONT_UC_INDEX_LATIN_EXTENDED_ADDITIONAL = 29,
  BL_FONT_UC_INDEX_GREEK_EXTENDED = 30,
  BL_FONT_UC_INDEX_GENERAL_PUNCTUATION = 31,
  BL_FONT_UC_INDEX_SUPERSCRIPTS_AND_SUBSCRIPTS = 32,
  BL_FONT_UC_INDEX_CURRENCY_SYMBOLS = 33,
  BL_FONT_UC_INDEX_COMBINING_DIACRITICAL_MARKS_FOR_SYMBOLS = 34,
  BL_FONT_UC_INDEX_LETTERLIKE_SYMBOLS = 35,
  BL_FONT_UC_INDEX_NUMBER_FORMS = 36,
  BL_FONT_UC_INDEX_ARROWS = 37,
  BL_FONT_UC_INDEX_MATHEMATICAL_OPERATORS = 38,
  BL_FONT_UC_INDEX_MISCELLANEOUS_TECHNICAL = 39,
  BL_FONT_UC_INDEX_CONTROL_PICTURES = 40,
  BL_FONT_UC_INDEX_OPTICAL_CHARACTER_RECOGNITION = 41,
  BL_FONT_UC_INDEX_ENCLOSED_ALPHANUMERICS = 42,
  BL_FONT_UC_INDEX_BOX_DRAWING = 43,
  BL_FONT_UC_INDEX_BLOCK_ELEMENTS = 44,
  BL_FONT_UC_INDEX_GEOMETRIC_SHAPES = 45,
  BL_FONT_UC_INDEX_MISCELLANEOUS_SYMBOLS = 46,
  BL_FONT_UC_INDEX_DINGBATS = 47,
  BL_FONT_UC_INDEX_CJK_SYMBOLS_AND_PUNCTUATION = 48,
  BL_FONT_UC_INDEX_HIRAGANA = 49,
  BL_FONT_UC_INDEX_KATAKANA = 50,
  BL_FONT_UC_INDEX_BOPOMOFO = 51,
  BL_FONT_UC_INDEX_HANGUL_COMPATIBILITY_JAMO = 52,
  BL_FONT_UC_INDEX_PHAGS_PA = 53,
  BL_FONT_UC_INDEX_ENCLOSED_CJK_LETTERS_AND_MONTHS = 54,
  BL_FONT_UC_INDEX_CJK_COMPATIBILITY = 55,
  BL_FONT_UC_INDEX_HANGUL_SYLLABLES = 56,
  BL_FONT_UC_INDEX_NON_PLANE = 57,
  BL_FONT_UC_INDEX_PHOENICIAN = 58,
  BL_FONT_UC_INDEX_CJK_UNIFIED_IDEOGRAPHS = 59,
  BL_FONT_UC_INDEX_PRIVATE_USE_PLANE0 = 60,
  BL_FONT_UC_INDEX_CJK_STROKES = 61,
  BL_FONT_UC_INDEX_ALPHABETIC_PRESENTATION_FORMS = 62,
  BL_FONT_UC_INDEX_ARABIC_PRESENTATION_FORMS_A = 63,
  BL_FONT_UC_INDEX_COMBINING_HALF_MARKS = 64,
  BL_FONT_UC_INDEX_VERTICAL_FORMS = 65,
  BL_FONT_UC_INDEX_SMALL_FORM_VARIANTS = 66,
  BL_FONT_UC_INDEX_ARABIC_PRESENTATION_FORMS_B = 67,
  BL_FONT_UC_INDEX_HALFWIDTH_AND_FULLWIDTH_FORMS = 68,
  BL_FONT_UC_INDEX_SPECIALS = 69,
  BL_FONT_UC_INDEX_TIBETAN = 70,
  BL_FONT_UC_INDEX_SYRIAC = 71,
  BL_FONT_UC_INDEX_THAANA = 72,
  BL_FONT_UC_INDEX_SINHALA = 73,
  BL_FONT_UC_INDEX_MYANMAR = 74,
  BL_FONT_UC_INDEX_ETHIOPIC = 75,
  BL_FONT_UC_INDEX_CHEROKEE = 76,
  BL_FONT_UC_INDEX_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 77,
  BL_FONT_UC_INDEX_OGHAM = 78,
  BL_FONT_UC_INDEX_RUNIC = 79,
  BL_FONT_UC_INDEX_KHMER = 80,
  BL_FONT_UC_INDEX_MONGOLIAN = 81,
  BL_FONT_UC_INDEX_BRAILLE_PATTERNS = 82,
  BL_FONT_UC_INDEX_YI_SYLLABLES_AND_RADICALS = 83,
  BL_FONT_UC_INDEX_TAGALOG_HANUNOO_BUHID_TAGBANWA = 84,
  BL_FONT_UC_INDEX_OLD_ITALIC = 85,
  BL_FONT_UC_INDEX_GOTHIC = 86,
  BL_FONT_UC_INDEX_DESERET = 87,
  BL_FONT_UC_INDEX_MUSICAL_SYMBOLS = 88,
  BL_FONT_UC_INDEX_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 89,
  BL_FONT_UC_INDEX_PRIVATE_USE_PLANE_15_16 = 90,
  BL_FONT_UC_INDEX_VARIATION_SELECTORS = 91,
  BL_FONT_UC_INDEX_TAGS = 92,
  BL_FONT_UC_INDEX_LIMBU = 93,
  BL_FONT_UC_INDEX_TAI_LE = 94,
  BL_FONT_UC_INDEX_NEW_TAI_LUE = 95,
  BL_FONT_UC_INDEX_BUGINESE = 96,
  BL_FONT_UC_INDEX_GLAGOLITIC = 97,
  BL_FONT_UC_INDEX_TIFINAGH = 98,
  BL_FONT_UC_INDEX_YIJING_HEXAGRAM_SYMBOLS = 99,
  BL_FONT_UC_INDEX_SYLOTI_NAGRI = 100,
  BL_FONT_UC_INDEX_LINEAR_B_SYLLABARY_AND_IDEOGRAMS = 101,
  BL_FONT_UC_INDEX_ANCIENT_GREEK_NUMBERS = 102,
  BL_FONT_UC_INDEX_UGARITIC = 103,
  BL_FONT_UC_INDEX_OLD_PERSIAN = 104,
  BL_FONT_UC_INDEX_SHAVIAN = 105,
  BL_FONT_UC_INDEX_OSMANYA = 106,
  BL_FONT_UC_INDEX_CYPRIOT_SYLLABARY = 107,
  BL_FONT_UC_INDEX_KHAROSHTHI = 108,
  BL_FONT_UC_INDEX_TAI_XUAN_JING_SYMBOLS = 109,
  BL_FONT_UC_INDEX_CUNEIFORM = 110,
  BL_FONT_UC_INDEX_COUNTING_ROD_NUMERALS = 111,
  BL_FONT_UC_INDEX_SUNDANESE = 112,
  BL_FONT_UC_INDEX_LEPCHA = 113,
  BL_FONT_UC_INDEX_OL_CHIKI = 114,
  BL_FONT_UC_INDEX_SAURASHTRA = 115,
  BL_FONT_UC_INDEX_KAYAH_LI = 116,
  BL_FONT_UC_INDEX_REJANG = 117,
  BL_FONT_UC_INDEX_CHAM = 118,
  BL_FONT_UC_INDEX_ANCIENT_SYMBOLS = 119,
  BL_FONT_UC_INDEX_PHAISTOS_DISC = 120,
  BL_FONT_UC_INDEX_CARIAN_LYCIAN_LYDIAN = 121,
  BL_FONT_UC_INDEX_DOMINO_AND_MAHJONG_TILES = 122,
  BL_FONT_UC_INDEX_INTERNAL_USAGE_123 = 123,
  BL_FONT_UC_INDEX_INTERNAL_USAGE_124 = 124,
  BL_FONT_UC_INDEX_INTERNAL_USAGE_125 = 125,
  BL_FONT_UC_INDEX_INTERNAL_USAGE_126 = 126,
  BL_FONT_UC_INDEX_INTERNAL_USAGE_127 = 127
}
global BLTextDirection: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_TEXT_DIRECTION_LTR = 0,
  BL_TEXT_DIRECTION_RTL = 1,
  BL_TEXT_DIRECTION_COUNT = 2
}
global BLTextOrientation: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_TEXT_ORIENTATION_HORIZONTAL = 0,
  BL_TEXT_ORIENTATION_VERTICAL = 1,
  BL_TEXT_ORIENTATION_COUNT = 2
}
BLGlyphInfo = @record{
  cluster: uint32,
  reserved: [2]uint32
}
BLGlyphPlacement = @record{
  placement: BLPointI,
  advance: BLPointI
}
BLGlyphMappingState = @record{
  glyphCount: csize,
  undefinedFirst: csize,
  undefinedCount: csize
}
BLGlyphOutlineSinkInfo = @record{
  glyphIndex: csize,
  contourCount: csize
}
BLGlyphRun = @record{
  glyphData: pointer,
  placementData: pointer,
  size: csize,
  glyphSize: uint8,
  placementType: uint8,
  glyphAdvance: int8,
  placementAdvance: int8,
  flags: uint32
}
BLFontFaceInfo = @record{
  faceType: uint8,
  outlineType: uint8,
  glyphCount: uint16,
  revision: uint32,
  faceIndex: uint32,
  faceFlags: uint32,
  diagFlags: uint32,
  reserved: [3]uint32
}
BLFontQueryProperties = @record{
  style: uint32,
  weight: uint32,
  stretch: uint32
}
BLFontTable = @record{
  data: *uint8,
  size: csize
}
BLFontFeature = @record{
  tag: cuint,
  value: uint32
}
BLFontVariation = @record{
  tag: cuint,
  value: float32
}
BLFontUnicodeCoverage = @record{
  data: [4]uint32
}
BLFontPanose = @record{
  __unnamed1: union{
    data: [10]uint8,
    familyKind: uint8,
    text: record{
      familyKind: uint8,
      serifStyle: uint8,
      weight: uint8,
      proportion: uint8,
      contrast: uint8,
      strokeVariation: uint8,
      armStyle: uint8,
      letterform: uint8,
      midline: uint8,
      xHeight: uint8
    },
    script: record{
      familyKind: uint8,
      toolKind: uint8,
      weight: uint8,
      spacing: uint8,
      aspectRatio: uint8,
      contrast: uint8,
      topology: uint8,
      form: uint8,
      finials: uint8,
      xAscent: uint8
    },
    decorative: record{
      familyKind: uint8,
      decorativeClass: uint8,
      weight: uint8,
      aspect: uint8,
      contrast: uint8,
      serifVariant: uint8,
      treatment: uint8,
      lining: uint8,
      topology: uint8,
      characterRange: uint8
    },
    symbol: record{
      familyKind: uint8,
      symbolKind: uint8,
      weight: uint8,
      spacing: uint8,
      aspectRatioAndContrast: uint8,
      aspectRatio94: uint8,
      aspectRatio119: uint8,
      aspectRatio157: uint8,
      aspectRatio163: uint8,
      aspectRatio211: uint8
    }
  }
}
BLFontMatrix = @record{
  __unnamed1: union{
    m: [4]float64,
    __unnamed1: record{
      m00: float64,
      m01: float64,
      m10: float64,
      m11: float64
    }
  }
}
BLFontMetrics = @record{
  size: float32,
  __unnamed1: union{
    __unnamed1: record{
      ascent: float32,
      vAscent: float32,
      descent: float32,
      vDescent: float32
    },
    __unnamed2: record{
      ascentByOrientation: [2]float32,
      descentByOrientation: [2]float32
    }
  },
  lineGap: float32,
  xHeight: float32,
  capHeight: float32,
  xMin: float32,
  yMin: float32,
  xMax: float32,
  yMax: float32,
  underlinePosition: float32,
  underlineThickness: float32,
  strikethroughPosition: float32,
  strikethroughThickness: float32
}
BLFontDesignMetrics = @record{
  unitsPerEm: cint,
  lowestPPEM: cint,
  lineGap: cint,
  xHeight: cint,
  capHeight: cint,
  __unnamed1: union{
    __unnamed1: record{
      ascent: cint,
      vAscent: cint,
      descent: cint,
      vDescent: cint,
      hMinLSB: cint,
      vMinLSB: cint,
      hMinTSB: cint,
      vMinTSB: cint,
      hMaxAdvance: cint,
      vMaxAdvance: cint
    },
    __unnamed2: record{
      ascentByOrientation: [2]cint,
      descentByOrientation: [2]cint,
      minLSBByOrientation: [2]cint,
      minTSBByOrientation: [2]cint,
      maxAdvanceByOrientation: [2]cint
    }
  },
  __unnamed2: union{
    glyphBoundingBox: BLBoxI,
    __unnamed1: record{
      xMin: cint,
      yMin: cint,
      xMax: cint,
      yMax: cint
    }
  },
  underlinePosition: cint,
  underlineThickness: cint,
  strikethroughPosition: cint,
  strikethroughThickness: cint
}
BLTextMetrics = @record{
  advance: BLPoint,
  leadingBearing: BLPoint,
  trailingBearing: BLPoint,
  boundingBox: BLBox
}
BLGlyphBufferImpl = @record{
  __unnamed1: union{
    __unnamed1: record{
      content: *uint32,
      placementData: *BLGlyphPlacement,
      size: csize,
      reserved: uint32,
      flags: uint32
    },
    glyphRun: BLGlyphRun
  },
  infoData: *BLGlyphInfo
}
BLGlyphBufferCore = @record{
  impl: *BLGlyphBufferImpl
}
global BLPathCmd: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_PATH_CMD_MOVE = 0,
  BL_PATH_CMD_ON = 1,
  BL_PATH_CMD_QUAD = 2,
  BL_PATH_CMD_CUBIC = 3,
  BL_PATH_CMD_CLOSE = 4,
  BL_PATH_CMD_COUNT = 5
}
global BLPathCmdExtra: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_PATH_CMD_PRESERVE = 4294967295
}
global BLPathFlags: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_PATH_FLAG_EMPTY = 1,
  BL_PATH_FLAG_MULTIPLE = 2,
  BL_PATH_FLAG_QUADS = 4,
  BL_PATH_FLAG_CUBICS = 8,
  BL_PATH_FLAG_INVALID = 1073741824,
  BL_PATH_FLAG_DIRTY = 2147483648
}
global BLPathReverseMode: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_PATH_REVERSE_MODE_COMPLETE = 0,
  BL_PATH_REVERSE_MODE_SEPARATE = 1,
  BL_PATH_REVERSE_MODE_COUNT = 2
}
global BLStrokeJoin: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_STROKE_JOIN_MITER_CLIP = 0,
  BL_STROKE_JOIN_MITER_BEVEL = 1,
  BL_STROKE_JOIN_MITER_ROUND = 2,
  BL_STROKE_JOIN_BEVEL = 3,
  BL_STROKE_JOIN_ROUND = 4,
  BL_STROKE_JOIN_COUNT = 5
}
global BLStrokeCapPosition: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_STROKE_CAP_POSITION_START = 0,
  BL_STROKE_CAP_POSITION_END = 1,
  BL_STROKE_CAP_POSITION_COUNT = 2
}
global BLStrokeCap: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_STROKE_CAP_BUTT = 0,
  BL_STROKE_CAP_SQUARE = 1,
  BL_STROKE_CAP_ROUND = 2,
  BL_STROKE_CAP_ROUND_REV = 3,
  BL_STROKE_CAP_TRIANGLE = 4,
  BL_STROKE_CAP_TRIANGLE_REV = 5,
  BL_STROKE_CAP_COUNT = 6
}
global BLStrokeTransformOrder: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_STROKE_TRANSFORM_ORDER_AFTER = 0,
  BL_STROKE_TRANSFORM_ORDER_BEFORE = 1,
  BL_STROKE_TRANSFORM_ORDER_COUNT = 2
}
global BLFlattenMode: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FLATTEN_MODE_DEFAULT = 0,
  BL_FLATTEN_MODE_RECURSIVE = 1,
  BL_FLATTEN_MODE_COUNT = 2
}
global BLOffsetMode: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_OFFSET_MODE_DEFAULT = 0,
  BL_OFFSET_MODE_ITERATIVE = 1,
  BL_OFFSET_MODE_COUNT = 2
}
BLApproximationOptions = @record{
  flattenMode: uint8,
  offsetMode: uint8,
  reservedFlags: [6]uint8,
  flattenTolerance: float64,
  simplifyTolerance: float64,
  offsetParameter: float64
}
global blDefaultApproximationOptions: BLApproximationOptions <cimport,nodecl>
BLStrokeOptionsCore = @record{
  __unnamed1: union{
    __unnamed1: record{
      startCap: uint8,
      endCap: uint8,
      join: uint8,
      transformOrder: uint8,
      reserved: [4]uint8
    },
    caps: [2]uint8,
    hints: uint64
  },
  width: float64,
  miterLimit: float64,
  dashOffset: float64,
  dashArray: BLArrayCore
}
BLPathView = @record{
  commandData: *uint8,
  vertexData: *BLPoint,
  size: csize
}
BLPathImpl = @record{
  capacity: csize,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  flags: uint32,
  __unnamed1: union{
    __unnamed1: record{
      commandData: *uint8,
      vertexData: *BLPoint,
      size: csize
    },
    view: BLPathView
  }
}
BLPathCore = @record{
  impl: *BLPathImpl
}
BLStringImpl = @record{
  capacity: csize,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  reserved: uint32,
  __unnamed1: union{
    __unnamed1: record{
      data: cstring,
      size: csize
    },
    view: BLStringView
  }
}
BLStringCore = @record{
  impl: *BLStringImpl
}
BLFontDataVirt = @record{
  destroy: function(*BLFontDataImpl): BLResult,
  listTags: function(*BLFontDataImpl, uint32, *BLArrayCore): BLResult,
  queryTables: function(*BLFontDataImpl, uint32, *BLFontTable, *cuint, csize): csize
}
BLFontDataImpl = @record{
  virt: *BLFontDataVirt,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  faceType: uint8,
  reserved: [3]uint8,
  faceCount: uint32,
  flags: uint32
}
BLFontDataCore = @record{
  impl: *BLFontDataImpl
}
BLFontFaceVirt = @record{
  destroy: function(*BLFontFaceImpl): BLResult
}
BLFontFaceImpl = @record{
  virt: *BLFontFaceVirt,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  weight: uint16,
  stretch: uint8,
  style: uint8,
  faceInfo: BLFontFaceInfo,
  uniqueId: culong,
  data: BLFontDataCore,
  fullName: BLStringCore,
  familyName: BLStringCore,
  subfamilyName: BLStringCore,
  postScriptName: BLStringCore,
  designMetrics: BLFontDesignMetrics,
  unicodeCoverage: BLFontUnicodeCoverage,
  panose: BLFontPanose
}
BLFontFaceCore = @record{
  impl: *BLFontFaceImpl
}
BLFontImpl = @record{
  face: BLFontFaceCore,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  weight: uint16,
  stretch: uint8,
  style: uint8,
  features: BLArrayCore,
  variations: BLArrayCore,
  metrics: BLFontMetrics,
  matrix: BLFontMatrix
}
BLFontCore = @record{
  impl: *BLFontImpl
}
global BLFormat: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FORMAT_NONE = 0,
  BL_FORMAT_PRGB32 = 1,
  BL_FORMAT_XRGB32 = 2,
  BL_FORMAT_A8 = 3,
  BL_FORMAT_COUNT = 4,
  BL_FORMAT_RESERVED_COUNT = 16
}
global BLFormatFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FORMAT_FLAG_RGB = 1,
  BL_FORMAT_FLAG_ALPHA = 2,
  BL_FORMAT_FLAG_RGBA = 3,
  BL_FORMAT_FLAG_LUM = 4,
  BL_FORMAT_FLAG_LUMA = 6,
  BL_FORMAT_FLAG_INDEXED = 16,
  BL_FORMAT_FLAG_PREMULTIPLIED = 256,
  BL_FORMAT_FLAG_BYTE_SWAP = 512,
  BL_FORMAT_FLAG_BYTE_ALIGNED = 65536,
  BL_FORMAT_FLAG_UNDEFINED_BITS = 131072,
  BL_FORMAT_FLAG_LE = 0,
  BL_FORMAT_FLAG_BE = 512
}
BLFormatInfo = @record{
  depth: uint32,
  flags: uint32,
  __unnamed1: union{
    __unnamed1: record{
      sizes: [4]uint8,
      shifts: [4]uint8
    },
    __unnamed2: record{
      rSize: uint8,
      gSize: uint8,
      bSize: uint8,
      aSize: uint8,
      rShift: uint8,
      gShift: uint8,
      bShift: uint8,
      aShift: uint8
    },
    palette: *BLRgba32
  }
}
global blFormatInfo: [16]BLFormatInfo <cimport,nodecl>
global BLImageInfoFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_IMAGE_INFO_FLAG_PROGRESSIVE = 1
}
global BLImageScaleFilter: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_IMAGE_SCALE_FILTER_NONE = 0,
  BL_IMAGE_SCALE_FILTER_NEAREST = 1,
  BL_IMAGE_SCALE_FILTER_BILINEAR = 2,
  BL_IMAGE_SCALE_FILTER_BICUBIC = 3,
  BL_IMAGE_SCALE_FILTER_BELL = 4,
  BL_IMAGE_SCALE_FILTER_GAUSS = 5,
  BL_IMAGE_SCALE_FILTER_HERMITE = 6,
  BL_IMAGE_SCALE_FILTER_HANNING = 7,
  BL_IMAGE_SCALE_FILTER_CATROM = 8,
  BL_IMAGE_SCALE_FILTER_BESSEL = 9,
  BL_IMAGE_SCALE_FILTER_SINC = 10,
  BL_IMAGE_SCALE_FILTER_LANCZOS = 11,
  BL_IMAGE_SCALE_FILTER_BLACKMAN = 12,
  BL_IMAGE_SCALE_FILTER_MITCHELL = 13,
  BL_IMAGE_SCALE_FILTER_USER = 14,
  BL_IMAGE_SCALE_FILTER_COUNT = 15
}
global BLImageScaleUserFunc: type <cimport,nodecl> = @function(*float64, *float64, csize, pointer): BLResult
BLImageData = @record{
  pixelData: pointer,
  stride: isize,
  size: BLSizeI,
  format: uint32,
  flags: uint32
}
BLImageInfo = @record{
  size: BLSizeI,
  density: BLSize,
  flags: uint32,
  depth: uint16,
  planeCount: uint16,
  frameCount: uint64,
  format: [16]cchar,
  compression: [16]cchar
}
BLImageScaleOptions = @record{
  userFunc: BLImageScaleUserFunc,
  userData: pointer,
  radius: float64,
  __unnamed1: union{
    data: [3]float64,
    mitchell: record{
      b: float64,
      c: float64
    }
  }
}
BLImageImpl = @record{
  pixelData: pointer,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  format: uint8,
  flags: uint8,
  depth: uint16,
  size: BLSizeI,
  stride: isize
}
BLImageCore = @record{
  impl: *BLImageImpl
}
global BLMapPointDArrayFunc: type <cimport,nodecl> = @function(pointer, *BLPoint, *BLPoint, csize): BLResult
global BLMatrix2DType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_MATRIX2D_TYPE_IDENTITY = 0,
  BL_MATRIX2D_TYPE_TRANSLATE = 1,
  BL_MATRIX2D_TYPE_SCALE = 2,
  BL_MATRIX2D_TYPE_SWAP = 3,
  BL_MATRIX2D_TYPE_AFFINE = 4,
  BL_MATRIX2D_TYPE_INVALID = 5,
  BL_MATRIX2D_TYPE_COUNT = 6
}
global BLMatrix2DValue: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_MATRIX2D_VALUE_00 = 0,
  BL_MATRIX2D_VALUE_01 = 1,
  BL_MATRIX2D_VALUE_10 = 2,
  BL_MATRIX2D_VALUE_11 = 3,
  BL_MATRIX2D_VALUE_20 = 4,
  BL_MATRIX2D_VALUE_21 = 5,
  BL_MATRIX2D_VALUE_COUNT = 6
}
global BLMatrix2DOp: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_MATRIX2D_OP_RESET = 0,
  BL_MATRIX2D_OP_ASSIGN = 1,
  BL_MATRIX2D_OP_TRANSLATE = 2,
  BL_MATRIX2D_OP_SCALE = 3,
  BL_MATRIX2D_OP_SKEW = 4,
  BL_MATRIX2D_OP_ROTATE = 5,
  BL_MATRIX2D_OP_ROTATE_PT = 6,
  BL_MATRIX2D_OP_TRANSFORM = 7,
  BL_MATRIX2D_OP_POST_TRANSLATE = 8,
  BL_MATRIX2D_OP_POST_SCALE = 9,
  BL_MATRIX2D_OP_POST_SKEW = 10,
  BL_MATRIX2D_OP_POST_ROTATE = 11,
  BL_MATRIX2D_OP_POST_ROTATE_PT = 12,
  BL_MATRIX2D_OP_POST_TRANSFORM = 13,
  BL_MATRIX2D_OP_COUNT = 14
}
BLMatrix2D = @record{
  __unnamed1: union{
    m: [6]float64,
    __unnamed1: record{
      m00: float64,
      m01: float64,
      m10: float64,
      m11: float64,
      m20: float64,
      m21: float64
    }
  }
}
global blMatrix2DMapPointDArrayFuncs: [6]BLMapPointDArrayFunc <cimport,nodecl>
BLRgba32 = @record{
  __unnamed1: union{
    value: uint32,
    __unnamed1: record{
      b: cuchar,
      g: cuchar,
      r: cuchar,
      a: cuchar
    }
  }
}
BLRgba64 = @record{
  __unnamed1: union{
    value: uint64,
    __unnamed1: record{
      b: cushort,
      g: cushort,
      r: cushort,
      a: cushort
    }
  }
}
BLRgba = @record{
  r: float32,
  g: float32,
  b: float32,
  a: float32
}
global BLRegionType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_REGION_TYPE_EMPTY = 0,
  BL_REGION_TYPE_RECT = 1,
  BL_REGION_TYPE_COMPLEX = 2,
  BL_REGION_TYPE_COUNT = 3
}
BLRegionImpl = @record{
  capacity: csize,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  reserved: [4]uint8,
  __unnamed1: union{
    __unnamed1: record{
      data: *BLBoxI,
      size: csize
    },
    view: BLRegionView
  },
  boundingBox: BLBoxI
}
BLRegionCore = @record{
  impl: *BLRegionImpl
}
global BLGradientType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_GRADIENT_TYPE_LINEAR = 0,
  BL_GRADIENT_TYPE_RADIAL = 1,
  BL_GRADIENT_TYPE_CONICAL = 2,
  BL_GRADIENT_TYPE_COUNT = 3
}
global BLGradientValue: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_GRADIENT_VALUE_COMMON_X0 = 0,
  BL_GRADIENT_VALUE_COMMON_Y0 = 1,
  BL_GRADIENT_VALUE_COMMON_X1 = 2,
  BL_GRADIENT_VALUE_COMMON_Y1 = 3,
  BL_GRADIENT_VALUE_RADIAL_R0 = 4,
  BL_GRADIENT_VALUE_CONICAL_ANGLE = 2,
  BL_GRADIENT_VALUE_COUNT = 6
}
BLGradientStop = @record{
  offset: float64,
  rgba: BLRgba64
}
BLLinearGradientValues = @record{
  x0: float64,
  y0: float64,
  x1: float64,
  y1: float64
}
BLRadialGradientValues = @record{
  x0: float64,
  y0: float64,
  x1: float64,
  y1: float64,
  r0: float64
}
BLConicalGradientValues = @record{
  x0: float64,
  y0: float64,
  angle: float64
}
BLGradientImpl = @record{
  capacity: csize,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  gradientType: uint8,
  extendMode: uint8,
  matrixType: uint8,
  reserved: [1]uint8,
  __unnamed1: union{
    __unnamed1: record{
      stops: *BLGradientStop,
      size: csize
    }
  },
  matrix: BLMatrix2D,
  __unnamed2: union{
    values: [6]float64,
    linear: BLLinearGradientValues,
    radial: BLRadialGradientValues,
    conical: BLConicalGradientValues
  }
}
BLGradientCore = @record{
  impl: *BLGradientImpl
}
BLPatternImpl = @record{
  image: BLImageCore,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  patternType: uint8,
  extendMode: uint8,
  matrixType: uint8,
  reserved: [1]uint8,
  matrix: BLMatrix2D,
  area: BLRectI
}
BLPatternCore = @record{
  impl: *BLPatternImpl
}
global BLStyleType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_STYLE_TYPE_NONE = 0,
  BL_STYLE_TYPE_SOLID = 1,
  BL_STYLE_TYPE_PATTERN = 2,
  BL_STYLE_TYPE_GRADIENT = 3,
  BL_STYLE_TYPE_COUNT = 4
}
BLStyleCore = @record{
  __unnamed1: union{
    rgba: BLRgba,
    variant: BLVariantCore,
    pattern: BLPatternCore,
    gradient: BLGradientCore,
    data: record{
      unknown: uint64,
      type: uint32,
      tag: uint32
    },
    u64Data: [2]uint64
  }
}
global BLContextType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_CONTEXT_TYPE_NONE = 0,
  BL_CONTEXT_TYPE_DUMMY = 1,
  BL_CONTEXT_TYPE_RASTER = 3,
  BL_CONTEXT_TYPE_COUNT = 4
}
global BLContextHint: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_CONTEXT_HINT_RENDERING_QUALITY = 0,
  BL_CONTEXT_HINT_GRADIENT_QUALITY = 1,
  BL_CONTEXT_HINT_PATTERN_QUALITY = 2,
  BL_CONTEXT_HINT_COUNT = 8
}
global BLContextOpType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_CONTEXT_OP_TYPE_FILL = 0,
  BL_CONTEXT_OP_TYPE_STROKE = 1,
  BL_CONTEXT_OP_TYPE_COUNT = 2
}
global BLContextFlushFlags: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_CONTEXT_FLUSH_SYNC = 2147483648
}
global BLContextCreateFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_CONTEXT_CREATE_FLAG_FALLBACK_TO_SYNC = 8,
  BL_CONTEXT_CREATE_FLAG_ISOLATED_THREAD_POOL = 16777216,
  BL_CONTEXT_CREATE_FLAG_ISOLATED_JIT_RUNTIME = 33554432,
  BL_CONTEXT_CREATE_FLAG_ISOLATED_JIT_LOGGING = 67108864,
  BL_CONTEXT_CREATE_FLAG_OVERRIDE_CPU_FEATURES = 134217728
}
global BLContextProperty: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_CONTEXT_PROPERTY_THREAD_COUNT = 0,
  BL_CONTEXT_PROPERTY_ACCUMULATED_ERROR_FLAGS = 10
}
global BLContextErrorFlags: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_CONTEXT_ERROR_FLAG_INVALID_VALUE = 1,
  BL_CONTEXT_ERROR_FLAG_INVALID_STATE = 2,
  BL_CONTEXT_ERROR_FLAG_INVALID_GEOMETRY = 4,
  BL_CONTEXT_ERROR_FLAG_INVALID_GLYPH = 8,
  BL_CONTEXT_ERROR_FLAG_INVALID_FONT = 16,
  BL_CONTEXT_ERROR_FLAG_THREAD_POOL_EXHAUSTED = 536870912,
  BL_CONTEXT_ERROR_FLAG_OUT_OF_MEMORY = 1073741824,
  BL_CONTEXT_ERROR_FLAG_UNKNOWN_ERROR = 2147483648
}
global BLClipMode: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_CLIP_MODE_ALIGNED_RECT = 0,
  BL_CLIP_MODE_UNALIGNED_RECT = 1,
  BL_CLIP_MODE_MASK = 2,
  BL_CLIP_MODE_COUNT = 3
}
global BLCompOp: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_COMP_OP_SRC_OVER = 0,
  BL_COMP_OP_SRC_COPY = 1,
  BL_COMP_OP_SRC_IN = 2,
  BL_COMP_OP_SRC_OUT = 3,
  BL_COMP_OP_SRC_ATOP = 4,
  BL_COMP_OP_DST_OVER = 5,
  BL_COMP_OP_DST_COPY = 6,
  BL_COMP_OP_DST_IN = 7,
  BL_COMP_OP_DST_OUT = 8,
  BL_COMP_OP_DST_ATOP = 9,
  BL_COMP_OP_XOR = 10,
  BL_COMP_OP_CLEAR = 11,
  BL_COMP_OP_PLUS = 12,
  BL_COMP_OP_MINUS = 13,
  BL_COMP_OP_MODULATE = 14,
  BL_COMP_OP_MULTIPLY = 15,
  BL_COMP_OP_SCREEN = 16,
  BL_COMP_OP_OVERLAY = 17,
  BL_COMP_OP_DARKEN = 18,
  BL_COMP_OP_LIGHTEN = 19,
  BL_COMP_OP_COLOR_DODGE = 20,
  BL_COMP_OP_COLOR_BURN = 21,
  BL_COMP_OP_LINEAR_BURN = 22,
  BL_COMP_OP_LINEAR_LIGHT = 23,
  BL_COMP_OP_PIN_LIGHT = 24,
  BL_COMP_OP_HARD_LIGHT = 25,
  BL_COMP_OP_SOFT_LIGHT = 26,
  BL_COMP_OP_DIFFERENCE = 27,
  BL_COMP_OP_EXCLUSION = 28,
  BL_COMP_OP_COUNT = 29
}
global BLGradientQuality: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_GRADIENT_QUALITY_NEAREST = 0,
  BL_GRADIENT_QUALITY_COUNT = 1
}
global BLPatternQuality: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_PATTERN_QUALITY_NEAREST = 0,
  BL_PATTERN_QUALITY_BILINEAR = 1,
  BL_PATTERN_QUALITY_COUNT = 2
}
global BLRenderingQuality: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_RENDERING_QUALITY_ANTIALIAS = 0,
  BL_RENDERING_QUALITY_COUNT = 1
}
BLContextCreateInfo = @record{
  flags: uint32,
  threadCount: uint32,
  cpuFeatures: uint32,
  commandQueueLimit: uint32,
  reserved: [4]uint32
}
BLContextCookie = @record{
  data: [2]uint64
}
BLContextHints = @record{
  __unnamed1: union{
    __unnamed1: record{
      renderingQuality: uint8,
      gradientQuality: uint8,
      patternQuality: uint8
    },
    hints: [8]uint8
  }
}
BLContextState = @record{
  targetImage: *BLImageCore,
  targetSize: BLSize,
  hints: BLContextHints,
  compOp: uint8,
  fillRule: uint8,
  styleType: [2]uint8,
  reserved: [4]uint8,
  approximationOptions: BLApproximationOptions,
  globalAlpha: float64,
  styleAlpha: [2]float64,
  strokeOptions: BLStrokeOptionsCore,
  metaMatrix: BLMatrix2D,
  userMatrix: BLMatrix2D,
  savedStateCount: csize
}
BLContextVirt = @record{
  destroy: function(*BLContextImpl): BLResult,
  flush: function(*BLContextImpl, uint32): BLResult,
  queryProperty: function(*BLContextImpl, uint32, pointer): BLResult,
  save: function(*BLContextImpl, *BLContextCookie): BLResult,
  restore: function(*BLContextImpl, *BLContextCookie): BLResult,
  matrixOp: function(*BLContextImpl, uint32, pointer): BLResult,
  userToMeta: function(*BLContextImpl): BLResult,
  setHint: function(*BLContextImpl, uint32, uint32): BLResult,
  setHints: function(*BLContextImpl, *BLContextHints): BLResult,
  setFlattenMode: function(*BLContextImpl, uint32): BLResult,
  setFlattenTolerance: function(*BLContextImpl, float64): BLResult,
  setApproximationOptions: function(*BLContextImpl, *BLApproximationOptions): BLResult,
  setCompOp: function(*BLContextImpl, uint32): BLResult,
  setGlobalAlpha: function(*BLContextImpl, float64): BLResult,
  setStyleAlpha: [2]function(*BLContextImpl, float64): BLResult,
  getStyle: [2]function(*BLContextImpl, *BLStyleCore): BLResult,
  setStyle: [2]function(*BLContextImpl, *BLStyleCore): BLResult,
  setStyleRgba: [2]function(*BLContextImpl, *BLRgba): BLResult,
  setStyleRgba32: [2]function(*BLContextImpl, uint32): BLResult,
  setStyleRgba64: [2]function(*BLContextImpl, uint64): BLResult,
  setStyleObject: [2]function(*BLContextImpl, pointer): BLResult,
  setFillRule: function(*BLContextImpl, uint32): BLResult,
  setStrokeWidth: function(*BLContextImpl, float64): BLResult,
  setStrokeMiterLimit: function(*BLContextImpl, float64): BLResult,
  setStrokeCap: function(*BLContextImpl, uint32, uint32): BLResult,
  setStrokeCaps: function(*BLContextImpl, uint32): BLResult,
  setStrokeJoin: function(*BLContextImpl, uint32): BLResult,
  setStrokeDashOffset: function(*BLContextImpl, float64): BLResult,
  setStrokeDashArray: function(*BLContextImpl, *BLArrayCore): BLResult,
  setStrokeTransformOrder: function(*BLContextImpl, uint32): BLResult,
  setStrokeOptions: function(*BLContextImpl, *BLStrokeOptionsCore): BLResult,
  clipToRectI: function(*BLContextImpl, *BLRectI): BLResult,
  clipToRectD: function(*BLContextImpl, *BLRect): BLResult,
  restoreClipping: function(*BLContextImpl): BLResult,
  clearAll: function(*BLContextImpl): BLResult,
  clearRectI: function(*BLContextImpl, *BLRectI): BLResult,
  clearRectD: function(*BLContextImpl, *BLRect): BLResult,
  fillAll: function(*BLContextImpl): BLResult,
  fillRectI: function(*BLContextImpl, *BLRectI): BLResult,
  fillRectD: function(*BLContextImpl, *BLRect): BLResult,
  fillPathD: function(*BLContextImpl, *BLPathCore): BLResult,
  fillGeometry: function(*BLContextImpl, uint32, pointer): BLResult,
  fillTextI: function(*BLContextImpl, *BLPointI, *BLFontCore, pointer, csize, uint32): BLResult,
  fillTextD: function(*BLContextImpl, *BLPoint, *BLFontCore, pointer, csize, uint32): BLResult,
  fillGlyphRunI: function(*BLContextImpl, *BLPointI, *BLFontCore, *BLGlyphRun): BLResult,
  fillGlyphRunD: function(*BLContextImpl, *BLPoint, *BLFontCore, *BLGlyphRun): BLResult,
  strokeRectI: function(*BLContextImpl, *BLRectI): BLResult,
  strokeRectD: function(*BLContextImpl, *BLRect): BLResult,
  strokePathD: function(*BLContextImpl, *BLPathCore): BLResult,
  strokeGeometry: function(*BLContextImpl, uint32, pointer): BLResult,
  strokeTextI: function(*BLContextImpl, *BLPointI, *BLFontCore, pointer, csize, uint32): BLResult,
  strokeTextD: function(*BLContextImpl, *BLPoint, *BLFontCore, pointer, csize, uint32): BLResult,
  strokeGlyphRunI: function(*BLContextImpl, *BLPointI, *BLFontCore, *BLGlyphRun): BLResult,
  strokeGlyphRunD: function(*BLContextImpl, *BLPoint, *BLFontCore, *BLGlyphRun): BLResult,
  blitImageI: function(*BLContextImpl, *BLPointI, *BLImageCore, *BLRectI): BLResult,
  blitImageD: function(*BLContextImpl, *BLPoint, *BLImageCore, *BLRectI): BLResult,
  blitScaledImageI: function(*BLContextImpl, *BLRectI, *BLImageCore, *BLRectI): BLResult,
  blitScaledImageD: function(*BLContextImpl, *BLRect, *BLImageCore, *BLRectI): BLResult
}
BLContextImpl = @record{
  virt: *BLContextVirt,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  contextType: uint32,
  state: *BLContextState
}
BLContextCore = @record{
  impl: *BLContextImpl
}
global BLFileOpenFlags: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_FILE_OPEN_READ = 1,
  BL_FILE_OPEN_WRITE = 2,
  BL_FILE_OPEN_RW = 3,
  BL_FILE_OPEN_CREATE = 4,
  BL_FILE_OPEN_DELETE = 8,
  BL_FILE_OPEN_TRUNCATE = 16,
  BL_FILE_OPEN_READ_EXCLUSIVE = 268435456,
  BL_FILE_OPEN_WRITE_EXCLUSIVE = 536870912,
  BL_FILE_OPEN_RW_EXCLUSIVE = 805306368,
  BL_FILE_OPEN_CREATE_EXCLUSIVE = 1073741824,
  BL_FILE_OPEN_DELETE_EXCLUSIVE = 2147483648
}
global BLFileSeekType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FILE_SEEK_SET = 0,
  BL_FILE_SEEK_CUR = 1,
  BL_FILE_SEEK_END = 2,
  BL_FILE_SEEK_COUNT = 3
}
global BLFileReadFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_FILE_READ_MMAP_ENABLED = 1,
  BL_FILE_READ_MMAP_AVOID_SMALL = 2,
  BL_FILE_READ_MMAP_NO_FALLBACK = 8
}
BLFileCore = @record{
  handle: isize
}
BLFontManagerVirt = @record{
  destroy: function(*BLFontManagerImpl): BLResult
}
BLFontManagerImpl = @record{
  virt: *BLFontManagerVirt,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  reserved: [4]uint8
}
BLFontManagerCore = @record{
  impl: *BLFontManagerImpl
}
global BLImageCodecFeatures: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_IMAGE_CODEC_FEATURE_READ = 1,
  BL_IMAGE_CODEC_FEATURE_WRITE = 2,
  BL_IMAGE_CODEC_FEATURE_LOSSLESS = 4,
  BL_IMAGE_CODEC_FEATURE_LOSSY = 8,
  BL_IMAGE_CODEC_FEATURE_MULTI_FRAME = 16,
  BL_IMAGE_CODEC_FEATURE_IPTC = 268435456,
  BL_IMAGE_CODEC_FEATURE_EXIF = 536870912,
  BL_IMAGE_CODEC_FEATURE_XMP = 1073741824
}
BLImageCodecVirt = @record{
  destroy: function(*BLImageCodecImpl): BLResult,
  inspectData: function(*BLImageCodecImpl, *uint8, csize): uint32,
  createDecoder: function(*BLImageCodecImpl, *BLImageDecoderCore): BLResult,
  createEncoder: function(*BLImageCodecImpl, *BLImageEncoderCore): BLResult
}
BLImageCodecImpl = @record{
  virt: *BLImageCodecVirt,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  features: uint32,
  name: cstring,
  vendor: cstring,
  mimeType: cstring,
  extensions: cstring
}
BLImageCodecCore = @record{
  impl: *BLImageCodecImpl
}
BLImageDecoderVirt = @record{
  destroy: function(*BLImageDecoderImpl): BLResult,
  restart: function(*BLImageDecoderImpl): BLResult,
  readInfo: function(*BLImageDecoderImpl, *BLImageInfo, *uint8, csize): BLResult,
  readFrame: function(*BLImageDecoderImpl, *BLImageCore, *uint8, csize): BLResult
}
BLImageDecoderImpl = @record{
  virt: *BLImageDecoderVirt,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  lastResult: BLResult,
  codec: BLImageCodecCore,
  handle: pointer,
  frameIndex: uint64,
  bufferIndex: csize
}
BLImageDecoderCore = @record{
  impl: *BLImageDecoderImpl
}
BLImageEncoderVirt = @record{
  destroy: function(*BLImageEncoderImpl): BLResult,
  restart: function(*BLImageEncoderImpl): BLResult,
  writeFrame: function(*BLImageEncoderImpl, *BLArrayCore, *BLImageCore): BLResult
}
BLImageEncoderImpl = @record{
  virt: *BLImageEncoderVirt,
  refCount: csize,
  implType: uint8,
  implTraits: uint8,
  memPoolData: uint16,
  lastResult: BLResult,
  codec: BLImageCodecCore,
  handle: pointer,
  frameIndex: uint64,
  bufferIndex: csize
}
BLImageEncoderCore = @record{
  impl: *BLImageEncoderImpl
}
global BLPixelConverterFunc: type <cimport,nodecl> = @function(*BLPixelConverterCore, *uint8, isize, *uint8, isize, uint32, uint32, *BLPixelConverterOptions): BLResult
global BLPixelConverterCreateFlags: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_PIXEL_CONVERTER_CREATE_FLAG_DONT_COPY_PALETTE = 1,
  BL_PIXEL_CONVERTER_CREATE_FLAG_ALTERABLE_PALETTE = 2,
  BL_PIXEL_CONVERTER_CREATE_FLAG_NO_MULTI_STEP = 4
}
BLPixelConverterOptions = @record{
  origin: BLPointI,
  gap: csize
}
BLPixelConverterCore = @record{
  __unnamed1: union{
    __unnamed1: record{
      convertFunc: BLPixelConverterFunc,
      internalFlags: uint8
    },
    data: [80]uint8
  }
}
BLRandom = @record{
  data: [2]uint64
}
global BLRuntimeLimits: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_RUNTIME_MAX_IMAGE_SIZE = 65535,
  BL_RUNTIME_MAX_THREAD_COUNT = 32
}
global BLRuntimeInfoType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_RUNTIME_INFO_TYPE_BUILD = 0,
  BL_RUNTIME_INFO_TYPE_SYSTEM = 1,
  BL_RUNTIME_INFO_TYPE_RESOURCE = 2,
  BL_RUNTIME_INFO_TYPE_COUNT = 3
}
global BLRuntimeBuildType: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_RUNTIME_BUILD_TYPE_DEBUG = 0,
  BL_RUNTIME_BUILD_TYPE_RELEASE = 1
}
global BLRuntimeCpuArch: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_RUNTIME_CPU_ARCH_UNKNOWN = 0,
  BL_RUNTIME_CPU_ARCH_X86 = 1,
  BL_RUNTIME_CPU_ARCH_ARM = 2,
  BL_RUNTIME_CPU_ARCH_MIPS = 3
}
global BLRuntimeCpuFeatures: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BL_RUNTIME_CPU_FEATURE_X86_SSE2 = 1,
  BL_RUNTIME_CPU_FEATURE_X86_SSE3 = 2,
  BL_RUNTIME_CPU_FEATURE_X86_SSSE3 = 4,
  BL_RUNTIME_CPU_FEATURE_X86_SSE4_1 = 8,
  BL_RUNTIME_CPU_FEATURE_X86_SSE4_2 = 16,
  BL_RUNTIME_CPU_FEATURE_X86_AVX = 32,
  BL_RUNTIME_CPU_FEATURE_X86_AVX2 = 64
}
global BLRuntimeCleanupFlags: type <cimport,nodecl,using,ctypedef> = @enum(cuint){
  BL_RUNTIME_CLEANUP_OBJECT_POOL = 1,
  BL_RUNTIME_CLEANUP_ZEROED_POOL = 2,
  BL_RUNTIME_CLEANUP_THREAD_POOL = 16,
  BL_RUNTIME_CLEANUP_EVERYTHING = 4294967295
}
BLRuntimeBuildInfo = @record{
  __unnamed1: union{
    version: uint32,
    __unnamed1: record{
      patchVersion: uint8,
      minorVersion: uint8,
      majorVersion: uint16
    }
  },
  buildType: uint32,
  baselineCpuFeatures: uint32,
  supportedCpuFeatures: uint32,
  maxImageSize: uint32,
  maxThreadCount: uint32,
  reserved: [2]uint32,
  compilerInfo: [32]cchar
}
BLRuntimeSystemInfo = @record{
  cpuArch: uint32,
  cpuFeatures: uint32,
  coreCount: uint32,
  threadCount: uint32,
  threadStackSize: uint32,
  removed: uint32,
  allocationGranularity: uint32,
  reserved: [5]uint32
}
BLRuntimeResourceInfo = @record{
  vmUsed: csize,
  vmReserved: csize,
  vmOverhead: csize,
  vmBlockCount: csize,
  zmUsed: csize,
  zmReserved: csize,
  zmOverhead: csize,
  zmBlockCount: csize,
  dynamicPipelineCount: csize,
  fileHandleCount: csize,
  fileMappingCount: csize,
  reserved: [5]csize
}
