## cflags '-I.'

require 'minicoro'
require 'C.stdio'
require 'C.stdlib'

local function fail(message: cstring , res: mco_result)
  C.printf("%s: %s", message, mco_result_description(res))
  C.exit(-1)
end

local function fibonacci_coro(co: *mco_coro)
  local m: integer = 1
  local n: integer = 1

  -- Retrieve max value.
  local max: integer = 0
  local res = mco_pop(co, &max, #@integer)
  if res ~= MCO_SUCCESS then
    fail("Failed to pop coroutine data", res)
  end

  while true do
    -- Yield the next Fibonacci number.
    if mco_push(co, &m, #@integer) ~= MCO_SUCCESS then
      fail("Failed to push coroutine data", res)
    end

    local res = mco_yield(co)
    if res ~= MCO_SUCCESS then
      fail("Failed to yield coroutine", res)
    end

    local tmp = m + n
    m = n
    n = tmp
    if m >= max then
      break
    end
  end

  -- Yield the last Fibonacci number.
  if mco_push(co, &m, #@integer) ~= MCO_SUCCESS then
    fail("Failed to push coroutine data", res)
  end
end

local function main()
  -- Create the coroutine.
  local co: *mco_coro
  local desc = mco_desc_init(fibonacci_coro, 0)
  local res = mco_create(&co, &desc)
  if res ~= MCO_SUCCESS then
    fail("Failed to create coroutine", res)
  end

  -- Set user data.
  local max: integer = 1000000000
  if mco_push(co, &max, #@integer) ~= MCO_SUCCESS then
    fail("Failed to push coroutine data", res)
  end

  local counter = 1
  while(mco_status(co) == MCO_SUSPENDED) do
    -- Resume the coroutine.
    res = mco_resume(co)
    if res ~= MCO_SUCCESS then
      fail("Failed to resume coroutine", res)
    end

    -- Retrieve user data set in last coroutine yield.
    local ret: integer = 0
    res = mco_pop(co, &ret, #@integer)
    if res ~= MCO_SUCCESS then
      fail("Failed to pop coroutine data", res)
    end
    C.printf("fib %d = %lu\n", (@cint)(counter), (@culong)(ret))
    counter = counter + 1
  end

  -- Destroy the coroutine.
  res = mco_destroy(co)
  return 0
end

return main()
